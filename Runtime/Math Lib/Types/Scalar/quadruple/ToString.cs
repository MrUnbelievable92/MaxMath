using System;
using System.Runtime.CompilerServices;
using Unity.Burst;
using Unity.Burst.CompilerServices;
using DevTools;

using static MaxMath.maxmath;

namespace MaxMath
{
    unsafe public readonly partial struct quadruple
    {
        [MethodImpl(MethodImplOptions.NoInlining)]
        public readonly void ToStringNative(char* result, out int length)
        {
            const int POW5_TABLE_SIZE = 56;
            const int FLOAT_128_POW5_INV_BITCOUNT = 249;
            const int FLOAT_128_POW5_BITCOUNT = 249;
        
        
            static ulong4 GENERIC_POW5_INV_SPLIT(uint index)
            {
                switch (index)
                {
                    case 0:  return new ulong4(                   0,                    0,                    0, 144115188075855872);
                    case 1:  return new ulong4( 1573859546583440065,  2691002611772552616,  6763753280790178510, 141347765182270746);
                    case 2:  return new ulong4(12960290449513840412, 12345512957918226762, 18057899791198622765, 138633484706040742);
                    case 3:  return new ulong4( 7615871757716765416,  9507132263365501332,  4879801712092008245, 135971326161092377);
                    case 4:  return new ulong4( 7869961150745287587,  5804035291554591636,  8883897266325833928, 133360288657597085);
                    case 5:  return new ulong4( 2942118023529634767, 15128191429820565086, 10638459445243230718, 130799390525667397);
                    case 6:  return new ulong4(14188759758411913794,  5362791266439207815,  8068821289119264054, 128287668946279217);
                    case 7:  return new ulong4( 7183196927902545212,  1952291723540117099, 12075928209936341512, 125824179589281448);
                    case 8:  return new ulong4( 5672588001402349748, 17892323620748423487,  9874578446960390364, 123407996258356868);
                    case 9:  return new ulong4( 4442590541217566325,  4558254706293456445, 10343828952663182727, 121038210542800766);
                    case 10: return new ulong4( 3005560928406962566,  2082271027139057888, 13961184524927245081, 118713931475986426);
                    case 11: return new ulong4(13299058168408384786, 17834349496131278595,  9029906103900731664, 116434285200389047);
                    case 12: return new ulong4( 5414878118283973035, 13079825470227392078, 17897304791683760280, 114198414639042157);
                    case 13: return new ulong4(14609755883382484834, 14991702445765844156,  3269802549772755411, 112005479173303009);
                    case 14: return new ulong4(15967774957605076027,  2511532636717499923, 16221038267832563171, 109854654326805788);
                    case 15: return new ulong4( 9269330061621627145,  3332501053426257392, 16223281189403734630, 107745131455483836);
                    case 16: return new ulong4(16739559299223642282,  1873986623300664530,  6546709159471442872, 105676117443544318);
                    case 17: return new ulong4(17116435360051202055,  1359075105581853924,  2038341371621886470, 103646834405281051);
                    case 18: return new ulong4(17144715798009627550,  3201623802661132408,  9757551605154622431, 101656519392613377);
                    case 19: return new ulong4(17580479792687825857,  6546633380567327312, 15099972427870912398,  99704424108241124);
                    case 20: return new ulong4( 9726477118325522902, 14578369026754005435, 11728055595254428803,  97789814624307808);
                    case 21: return new ulong4(  134593949518343635,  5715151379816901985,  1660163707976377376,  95911971106466306);
                    case 22: return new ulong4( 5515914027713859358,  7124354893273815720,  5548463282858794077,  94070187543243255);
                    case 23: return new ulong4( 6188403395862945512,  5681264392632320838, 15417410852121406654,  92263771480600430);
                    case 24: return new ulong4(15908890877468271457, 10398888261125597540,  4817794962769172309,  90492043761593298);
                    case 25: return new ulong4( 1413077535082201005, 12675058125384151580,  7731426132303759597,  88754338271028867);
                    case 26: return new ulong4( 1486733163972670293, 11369385300195092554, 11610016711694864110,  87050001685026843);
                    case 27: return new ulong4( 8788596583757589684,  3978580923851924802,  9255162428306775812,  85378393225389919);
                    case 28: return new ulong4( 7203518319660962120, 15044736224407683725,  2488132019818199792,  83738884418690858);
                    case 29: return new ulong4( 4004175967662388707, 18236988667757575407, 15613100370957482671,  82130858859985791);
                    case 30: return new ulong4(18371903370586036463,    53497579022921640, 16465963977267203307,  80553711981064899);
                    case 31: return new ulong4(10170778323887491315,  1999668801648976001, 10209763593579456445,  79006850823153334);
                    case 32: return new ulong4(17108131712433974546, 16825784443029944237,  2078700786753338945,  77489693813976938);
                    case 33: return new ulong4(17221789422665858532, 12145427517550446164,  5391414622238668005,  76001670549108934);
                    case 34: return new ulong4( 4859588996898795878,  1715798948121313204,  3950858167455137171,  74542221577515387);
                    case 35: return new ulong4(13513469241795711526,   631367850494860526, 10517278915021816160,  73110798191218799);
                    case 36: return new ulong4(11757513142672073111,  2581974932255022228, 17498959383193606459, 143413724438001539);
                    case 37: return new ulong4(14524355192525042817,  5640643347559376447,  1309659274756813016, 140659771648132296);
                    case 38: return new ulong4( 2765095348461978538, 11021111021896007722,  3224303603779962366, 137958702611185230);
                    case 39: return new ulong4(12373410389187981037, 13679193545685856195, 11644609038462631561, 135309501808182158);
                    case 40: return new ulong4(12813176257562780151,  3754199046160268020,  9954691079802960722, 132711173221007413);
                    case 41: return new ulong4(17557452279667723458,  3237799193992485824, 17893947919029030695, 130162739957935629);
                    case 42: return new ulong4(14634200999559435155,  4123869946105211004,  6955301747350769239, 127663243886350468);
                    case 43: return new ulong4( 2185352760627740240,  2864813346878886844, 13049218671329690184, 125211745272516185);
                    case 44: return new ulong4( 6143438674322183002, 10464733336980678750,  6982925169933978309, 122807322428266620);
                    case 45: return new ulong4( 1099509117817174576, 10202656147550524081,   754997032816608484, 120449071364478757);
                    case 46: return new ulong4( 2410631293559367023, 17407273750261453804, 15307291918933463037, 118136105451200587);
                    case 47: return new ulong4(12224968375134586697,  1664436604907828062, 11506086230137787358, 115867555084305488);
                    case 48: return new ulong4( 3495926216898000888, 18392536965197424288, 10992889188570643156, 113642567358547782);
                    case 49: return new ulong4( 8744506286256259680,  3966568369496879937, 18342264969761820037, 111460305746896569);
                    case 50: return new ulong4( 7689600520560455039,  5254331190877624630,  9628558080573245556, 109319949786027263);
                    case 51: return new ulong4(11862637625618819436,  3456120362318976488, 14690471063106001082, 107220694767852583);
                    case 52: return new ulong4( 5697330450030126444, 12424082405392918899,   358204170751754904, 105161751436977040);
                    case 53: return new ulong4(11257457505097373622, 15373192700214208870,   671619062372033814, 103142345693961148);
                    case 54: return new ulong4(16850355018477166700,  1913910419361963966,  4550257919755970531, 101161718304283822);
                    case 55: return new ulong4( 9670835567561997011, 10584031339132130638,  3060560222974851757,  99219124612893520);
                    case 56: return new ulong4( 7698686577353054710, 11689292838639130817, 11806331021588878241,  97313834264240819);
                    case 57: return new ulong4(12233569599615692137,  3347791226108469959, 10333904326094451110,  95445130927687169);
                    case 58: return new ulong4(13049400362825383933, 17142621313007799680,  3790542585289224168,  93612312028186576);
                    case 59: return new ulong4(12430457242474442072,  5625077542189557960, 14765055286236672238,  91814688482138969);
                    case 60: return new ulong4( 4759444137752473128,  2230562561567025078,  4954443037339580076,  90051584438315940);
                    case 61: return new ulong4( 7246913525170274758,  8910297835195760709,  4015904029508858381,  88322337023761438);
                    case 62: return new ulong4(12854430245836432067,  8135139748065431455, 11548083631386317976,  86626296094571907);
                    case 63: return new ulong4( 4848827254502687803,  4789491250196085625,  3988192420450664125,  84962823991462151);
                    case 64: return new ulong4( 7435538409611286684,   904061756819742353, 14598026519493048444,  83331295300025028);
                    case 65: return new ulong4(11042616160352530997,  8948390828345326218, 10052651191118271927,  81731096615594853);
                    case 66: return new ulong4(11059348291563778943, 11696515766184685544,  3783210511290897367,  80161626312626082);
                    case 67: return new ulong4( 7020010856491885826,  5025093219346041680,  8960210401638911765,  78622294318500592);
                    case 68: return new ulong4(17732844474490699984,  7820866704994446502,  6088373186798844243,  77112521891678506);
                    case 69: return new ulong4(  688278527545590501,  3045610706602776618,  8684243536999567610,  75631741404109150);
                    case 70: return new ulong4( 2734573255120657297,  3903146411440697663,  9470794821691856713,  74179396127820347);
                    case 71: return new ulong4(15996457521023071259,  4776627823451271680, 12394856457265744744,  72754940025605801);
                    case 72: return new ulong4(13492065758834518331,  7390517611012222399,  1630485387832860230, 142715675091463768);
                    case 73: return new ulong4(13665021627282055864,  9897834675523659302, 17907668136755296849, 139975126841173266);
                    case 74: return new ulong4( 9603773719399446181, 10771916301484339398, 10672699855989487527, 137287204938390542);
                    case 75: return new ulong4( 3630218541553511265,  8139010004241080614,  2876479648932814543, 134650898807055963);
                    case 76: return new ulong4( 8318835909686377084,  9525369258927993371,  2796120270400437057, 132065217277054270);
                    case 77: return new ulong4(11190003059043290163, 12424345635599592110, 12539346395388933763, 129529188211565064);
                    case 78: return new ulong4( 8701968833973242276,   820569587086330727,  2315591597351480110, 127041858141569228);
                    case 79: return new ulong4( 5115113890115690487, 16906305245394587826,  9899749468931071388, 124602291907373862);
                    case 80: return new ulong4(15543535488939245974, 10945189844466391399,  3553863472349432246, 122209572307020975);
                    case 81: return new ulong4( 7709257252608325038,  1191832167690640880, 15077137020234258537, 119862799751447719);
                    case 82: return new ulong4( 7541333244210021737,  9790054727902174575,  5160944773155322014, 117561091926268545);
                    case 83: return new ulong4(12297384708782857832,  1281328873123467374,  4827925254630475769, 115303583460052092);
                    case 84: return new ulong4(13243237906232367265, 15873887428139547641,  3607993172301799599, 113089425598968120);
                    case 85: return new ulong4(11384616453739611114, 15184114243769211033, 13148448124803481057, 110917785887682141);
                    case 86: return new ulong4(17727970963596660683,  1196965221832671990, 14537830463956404138, 108787847856377790);
                    case 87: return new ulong4(17241367586707330931,  8880584684128262874, 11173506540726547818, 106698810713789254);
                    case 88: return new ulong4( 7184427196661305643, 14332510582433188173, 14230167953789677901, 104649889046128358);
        
                    default: throw Assert.Unreachable();
                }
            }
            static ulong2 GENERIC_POW5_TABLE(uint index)
            {
                switch (index)
                {
                    case 0:  return new ulong2(                   1,                    0);
                    case 1:  return new ulong2(                   5,                    0);
                    case 2:  return new ulong2(                  25,                    0);
                    case 3:  return new ulong2(                 125,                    0);
                    case 4:  return new ulong2(                 625,                    0);
                    case 5:  return new ulong2(                3125,                    0);
                    case 6:  return new ulong2(               15625,                    0);
                    case 7:  return new ulong2(               78125,                    0);
                    case 8:  return new ulong2(              390625,                    0);
                    case 9:  return new ulong2(             1953125,                    0);
                    case 10: return new ulong2(             9765625,                    0);
                    case 11: return new ulong2(            48828125,                    0);
                    case 12: return new ulong2(           244140625,                    0);
                    case 13: return new ulong2(          1220703125,                    0);
                    case 14: return new ulong2(          6103515625,                    0);
                    case 15: return new ulong2(         30517578125,                    0);
                    case 16: return new ulong2(        152587890625,                    0);
                    case 17: return new ulong2(        762939453125,                    0);
                    case 18: return new ulong2(       3814697265625,                    0);
                    case 19: return new ulong2(      19073486328125,                    0);
                    case 20: return new ulong2(      95367431640625,                    0);
                    case 21: return new ulong2(     476837158203125,                    0);
                    case 22: return new ulong2(    2384185791015625,                    0);
                    case 23: return new ulong2(   11920928955078125,                    0);
                    case 24: return new ulong2(   59604644775390625,                    0);
                    case 25: return new ulong2(  298023223876953125,                    0);
                    case 26: return new ulong2( 1490116119384765625,                    0);
                    case 27: return new ulong2( 7450580596923828125,                    0);
                    case 28: return new ulong2(  359414837200037393,                    2);
                    case 29: return new ulong2( 1797074186000186965,                   10);
                    case 30: return new ulong2( 8985370930000934825,                   50);
                    case 31: return new ulong2( 8033366502585570893,                  252);
                    case 32: return new ulong2( 3273344365508751233,                 1262);
                    case 33: return new ulong2(16366721827543756165,                 6310);
                    case 34: return new ulong2( 8046632842880574361,                31554);
                    case 35: return new ulong2( 3339676066983768573,               157772);
                    case 36: return new ulong2(16698380334918842865,               788860);
                    case 37: return new ulong2( 9704925379756007861,              3944304);
                    case 38: return new ulong2(11631138751360936073,             19721522);
                    case 39: return new ulong2( 2815461535676025517,             98607613);
                    case 40: return new ulong2(14077307678380127585,            493038065);
                    case 41: return new ulong2(15046306170771983077,           2465190328);
                    case 42: return new ulong2( 1444554559021708921,          12325951644);
                    case 43: return new ulong2( 7222772795108544605,          61629758220);
                    case 44: return new ulong2(17667119901833171409,         308148791101);
                    case 45: return new ulong2(14548623214327650581,        1540743955509);
                    case 46: return new ulong2(17402883850509598057,        7703719777548);
                    case 47: return new ulong2(13227442957709783821,       38518598887744);
                    case 48: return new ulong2(10796982567420264257,      192592994438723);
                    case 49: return new ulong2(17091424689682218053,      962964972193617);
                    case 50: return new ulong2(11670147153572883801,     4814824860968089);
                    case 51: return new ulong2( 3010503546735764157,    24074124304840448);
                    case 52: return new ulong2(15052517733678820785,   120370621524202240);
                    case 53: return new ulong2( 1475612373555897461,   601853107621011204);
                    case 54: return new ulong2( 7378061867779487305,  3009265538105056020);
                    case 55: return new ulong2(18443565265187884909, 15046327690525280101);
        
                    default: throw Assert.Unreachable();
                }
            }
            static ulong POW5_INV_ERRORS(uint index)
            {
                switch (index)
                {
                    case 0:   return 0x1144155514145504;
                    case 1:   return 0x0000541555401141;
                    case 2:   return 0x0000000000000000;
                    case 3:   return 0x0154454000000000;
                    case 4:   return 0x4114105515544440;
                    case 5:   return 0x0001001111500415;
                    case 6:   return 0x4041411410011000;
                    case 7:   return 0x5550114515155014;
                    case 8:   return 0x1404100041554551;
                    case 9:   return 0x0515000450404410;
                    case 10:  return 0x5054544401140004;
                    case 11:  return 0x5155501005555105;
                    case 12:  return 0x1144141000105515;
                    case 13:  return 0x0541500000500000;
                    case 14:  return 0x1104105540444140;
                    case 15:  return 0x4000015055514110;
                    case 16:  return 0x0054010450004005;
                    case 17:  return 0x4155515404100005;
                    case 18:  return 0x5155145045155555;
                    case 19:  return 0x1511555515440558;
                    case 20:  return 0x5558544555515555;
                    case 21:  return 0x0000000000000010;
                    case 22:  return 0x5004000000000050;
                    case 23:  return 0x1415510100000010;
                    case 24:  return 0x4545555444514500;
                    case 25:  return 0x5155151555555551;
                    case 26:  return 0x1441540144044554;
                    case 27:  return 0x5150104045544400;
                    case 28:  return 0x5450545401444040;
                    case 29:  return 0x5554455045501400;
                    case 30:  return 0x4655155555555145;
                    case 31:  return 0x1000010055455055;
                    case 32:  return 0x1000004000055004;
                    case 33:  return 0x4455405104000005;
                    case 34:  return 0x4500114504150545;
                    case 35:  return 0x0000000014000000;
                    case 36:  return 0x5450000000000000;
                    case 37:  return 0x5514551511445555;
                    case 38:  return 0x4111501040555451;
                    case 39:  return 0x4515445500054444;
                    case 40:  return 0x5101500104100441;
                    case 41:  return 0x1545115155545055;
                    case 42:  return 0x0000000000000000;
                    case 43:  return 0x1554000000100000;
                    case 44:  return 0x5555545595551555;
                    case 45:  return 0x5555051851455955;
                    case 46:  return 0x5555555555555559;
                    case 47:  return 0x0000400011001555;
                    case 48:  return 0x0000004400040000;
                    case 49:  return 0x5455511555554554;
                    case 50:  return 0x5614555544115445;
                    case 51:  return 0x6455156145555155;
                    case 52:  return 0x5455855455415455;
                    case 53:  return 0x5515555144555545;
                    case 54:  return 0x0114400000145155;
                    case 55:  return 0x0000051000450511;
                    case 56:  return 0x4455154554445100;
                    case 57:  return 0x4554150141544455;
                    case 58:  return 0x65955555559a5965;
                    case 59:  return 0x5555555854559559;
                    case 60:  return 0x9569654559616595;
                    case 61:  return 0x1040044040005565;
                    case 62:  return 0x1010010500011044;
                    case 63:  return 0x1554015545154540;
                    case 64:  return 0x4440555401545441;
                    case 65:  return 0x1014441450550105;
                    case 66:  return 0x4545400410504145;
                    case 67:  return 0x5015111541040151;
                    case 68:  return 0x5145051154000410;
                    case 69:  return 0x1040001044545044;
                    case 70:  return 0x4001400000151410;
                    case 71:  return 0x0540000044040000;
                    case 72:  return 0x0510555454411544;
                    case 73:  return 0x0400054054141550;
                    case 74:  return 0x1001041145001100;
                    case 75:  return 0x0000000140000000;
                    case 76:  return 0x0000000014100000;
                    case 77:  return 0x1544005454000140;
                    case 78:  return 0x4050055505445145;
                    case 79:  return 0x0011511104504155;
                    case 80:  return 0x5505544415045055;
                    case 81:  return 0x1155154445515554;
                    case 82:  return 0x0000000000004555;
                    case 83:  return 0x0000000000000000;
                    case 84:  return 0x5101010510400004;
                    case 85:  return 0x1514045044440400;
                    case 86:  return 0x5515519555515555;
                    case 87:  return 0x4554545441555545;
                    case 88:  return 0x1551055955551515;
                    case 89:  return 0x0150000011505515;
                    case 90:  return 0x0044005040400000;
                    case 91:  return 0x0004001004010050;
                    case 92:  return 0x0000051004450414;
                    case 93:  return 0x0114001101001144;
                    case 94:  return 0x0401000001000001;
                    case 95:  return 0x4500010001000401;
                    case 96:  return 0x0004100000005000;
                    case 97:  return 0x0105000441101100;
                    case 98:  return 0x0455455550454540;
                    case 99:  return 0x5404050144105505;
                    case 100: return 0x4101510540555455;
                    case 101: return 0x1055541411451555;
                    case 102: return 0x5451445110115505;
                    case 103: return 0x1154110010101545;
                    case 104: return 0x1145140450054055;
                    case 105: return 0x5555565415551554;
                    case 106: return 0x1550559555555555;
                    case 107: return 0x5555541545045141;
                    case 108: return 0x4555455450500100;
                    case 109: return 0x5510454545554555;
                    case 110: return 0x1510140115045455;
                    case 111: return 0x1001050040111510;
                    case 112: return 0x5555454555555504;
                    case 113: return 0x9954155545515554;
                    case 114: return 0x6596656555555555;
                    case 115: return 0x0140410051555559;
                    case 116: return 0x0011104010001544;
                    case 117: return 0x965669659a680501;
                    case 118: return 0x5655a55955556955;
                    case 119: return 0x4015111014404514;
                    case 120: return 0x1414155554505145;
                    case 121: return 0x0540040011051404;
                    case 122: return 0x1010000000015005;
                    case 123: return 0x0010054050004410;
                    case 124: return 0x5041104014000100;
                    case 125: return 0x4440010500100001;
                    case 126: return 0x1155510504545554;
                    case 127: return 0x0450151545115541;
                    case 128: return 0x4000100400110440;
                    case 129: return 0x1004440010514440;
                    case 130: return 0x0000115050450000;
                    case 131: return 0x0545404455541500;
                    case 132: return 0x1051051555505101;
                    case 133: return 0x5505144554544144;
                    case 134: return 0x4550545555515550;
                    case 135: return 0x0015400450045445;
                    case 136: return 0x4514155400554415;
                    case 137: return 0x4555055051050151;
                    case 138: return 0x1511441450001014;
                    case 139: return 0x4544554510404414;
                    case 140: return 0x4115115545545450;
                    case 141: return 0x5500541555551555;
                    case 142: return 0x5550010544155015;
                    case 143: return 0x0144414045545500;
                    case 144: return 0x4154050001050150;
                    case 145: return 0x5550511111000145;
                    case 146: return 0x1114504055000151;
                    case 147: return 0x5104041101451040;
                    case 148: return 0x0010501401051441;
                    case 149: return 0x0010501450504401;
                    case 150: return 0x4554585440044444;
                    case 151: return 0x5155555951450455;
                    case 152: return 0x0040000400105555;
                    case 153: return 0x0000000000000001;
        
                    default: throw Assert.Unreachable();
                }
            }
            static ulong4 GENERIC_POW5_SPLIT(uint index)
            {
                switch (index)
                {
                    case 0:   return new ulong4(                   0u,                    0u,                    0u,  72057594037927936u);
                    case 1:   return new ulong4(                   0u,  5206161169240293376u,  4575641699882439235u,  73468396926392969u);
                    case 2:   return new ulong4( 3360510775605221349u,  6983200512169538081u,  4325643253124434363u,  74906821675075173u);
                    case 3:   return new ulong4(11917660854915489451u,  9652941469841108803u,   946308467778435600u,  76373409087490117u);
                    case 4:   return new ulong4( 1994853395185689235u, 16102657350889591545u,  6847013871814915412u,  77868710555449746u);
                    case 5:   return new ulong4(  958415760277438274u, 15059347134713823592u,  7329070255463483331u,  79393288266368765u);
                    case 6:   return new ulong4( 2065144883315240188u,  7145278325844925976u, 14718454754511147343u,  80947715414629833u);
                    case 7:   return new ulong4( 8980391188862868935u, 13709057401304208685u,  8230434828742694591u,  82532576417087045u);
                    case 8:   return new ulong4(  432148644612782575u,  7960151582448466064u, 12056089168559840552u,  84148467132788711u);
                    case 9:   return new ulong4(  484109300864744403u, 15010663910730448582u, 16824949663447227068u,  85795995087002057u);
                    case 10:  return new ulong4(14793711725276144220u, 16494403799991899904u, 10145107106505865967u,  87475779699624060u);
                    case 11:  return new ulong4(15427548291869817042u, 12330588654550505203u, 13980791795114552342u,  89188452518064298u);
                    case 12:  return new ulong4( 9979404135116626552u, 13477446383271537499u, 14459862802511591337u,  90934657454687378u);
                    case 13:  return new ulong4(12385121150303452775u,  9097130814231585614u,  6523855782339765207u,  92715051028904201u);
                    case 14:  return new ulong4( 1822931022538209743u, 16062974719797586441u,  3619180286173516788u,  94530302614003091u);
                    case 15:  return new ulong4(12318611738248470829u, 13330752208259324507u, 10986694768744162601u,  96381094688813589u);
                    case 16:  return new ulong4(13684493829640282333u,  7674802078297225834u, 15208116197624593182u,  98268123094297527u);
                    case 17:  return new ulong4( 5408877057066295332u,  6470124174091971006u, 15112713923117703147u, 100192097295163851u);
                    case 18:  return new ulong4(11407083166564425062u, 18189998238742408185u,  4337638702446708282u, 102153740646605557u);
                    case 19:  return new ulong4( 4112405898036935485u,   924624216579956435u, 14251108172073737125u, 104153790666259019u);
                    case 20:  return new ulong4(16996739107011444789u, 10015944118339042475u,  2395188869672266257u, 106192999311487969u);
                    case 21:  return new ulong4( 4588314690421337879u,  5339991768263654604u, 15441007590670620066u, 108272133262096356u);
                    case 22:  return new ulong4( 2286159977890359825u, 14329706763185060248u,  5980012964059367667u, 110391974208576409u);
                    case 23:  return new ulong4( 9654767503237031099u, 11293544302844823188u, 11739932712678287805u, 112553319146000238u);
                    case 24:  return new ulong4(11362964448496095896u,  7990659682315657680u,   251480263940996374u, 114756980673665505u);
                    case 25:  return new ulong4( 1423410421096377129u, 14274395557581462179u, 16553482793602208894u, 117003787300607788u);
                    case 26:  return new ulong4( 2070444190619093137u, 11517140404712147401u, 11657844572835578076u, 119294583757094535u);
                    case 27:  return new ulong4( 7648316884775828921u, 15264332483297977688u,   247182277434709002u, 121630231312217685u);
                    case 28:  return new ulong4(17410896758132241352u, 10923914482914417070u, 13976383996795783649u, 124011608097704390u);
                    case 29:  return new ulong4( 9542674537907272703u,  3079432708831728956u, 14235189590642919676u, 126439609438067572u);
                    case 30:  return new ulong4(10364666969937261816u,  8464573184892924210u, 12758646866025101190u, 128915148187220428u);
                    case 31:  return new ulong4(14720354822146013883u, 11480204489231511423u,  7449876034836187038u, 131439155071681461u);
                    case 32:  return new ulong4( 1692907053653558553u, 17835392458598425233u,  1754856712536736598u, 134012579040499057u);
                    case 33:  return new ulong4( 5620591334531458755u, 11361776175667106627u, 13350215315297937856u, 136636387622027174u);
                    case 34:  return new ulong4(17455759733928092601u, 10362573084069962561u, 11246018728801810510u, 139311567287686283u);
                    case 35:  return new ulong4( 2465404073814044982u, 17694822665274381860u,  1509954037718722697u, 142039123822846312u);
                    case 36:  return new ulong4( 2152236053329638369u, 11202280800589637091u, 16388426812920420176u,  72410041352485523u);
                    case 37:  return new ulong4(17319024055671609028u, 10944982848661280484u,  2457150158022562661u,  73827744744583080u);
                    case 38:  return new ulong4(17511219308535248024u,  5122059497846768077u,  2089605804219668451u,  75273205100637900u);
                    case 39:  return new ulong4(10082673333144031533u, 14429008783411894887u, 12842832230171903890u,  76746965869337783u);
                    case 40:  return new ulong4(16196653406315961184u, 10260180891682904501u, 10537411930446752461u,  78249581139456266u);
                    case 41:  return new ulong4(15084422041749743389u,   234835370106753111u, 16662517110286225617u,  79781615848172976u);
                    case 42:  return new ulong4( 8199644021067702606u,  3787318116274991885u,  7438130039325743106u,  81343645993472659u);
                    case 43:  return new ulong4(12039493937039359765u,  9773822153580393709u,  5945428874398357806u,  82936258850702722u);
                    case 44:  return new ulong4(  984543865091303961u,  7975107621689454830u,  6556665988501773347u,  84560053193370726u);
                    case 45:  return new ulong4( 9633317878125234244u, 16099592426808915028u,  9706674539190598200u,  86215639518264828u);
                    case 46:  return new ulong4( 6860695058870476186u,  4471839111886709592u,  7828342285492709568u,  87903640274981819u);
                    case 47:  return new ulong4(14583324717644598331u,  4496120889473451238u,  5290040788305728466u,  89624690099949049u);
                    case 48:  return new ulong4(18093669366515003715u, 12879506572606942994u, 18005739787089675377u,  91379436055028227u);
                    case 49:  return new ulong4(17997493966862379937u, 14646222655265145582u, 10265023312844161858u,  93168537870790806u);
                    case 50:  return new ulong4(12283848109039722318u, 11290258077250314935u,  9878160025624946825u,  94992668194556404u);
                    case 51:  return new ulong4( 8087752761883078164u,  5262596608437575693u, 11093553063763274413u,  96852512843287537u);
                    case 52:  return new ulong4(15027787746776840781u, 12250273651168257752u,  9290470558712181914u,  98748771061435726u);
                    case 53:  return new ulong4(15003915578366724489u,  2937334162439764327u,  5404085603526796602u, 100682155783835929u);
                    case 54:  return new ulong4( 5225610465224746757u, 14932114897406142027u,  2774647558180708010u, 102653393903748137u);
                    case 55:  return new ulong4(17112957703385190360u, 12069082008339002412u,  3901112447086388439u, 104663226546146909u);
                    case 56:  return new ulong4( 4062324464323300238u,  3992768146772240329u, 15757196565593695724u, 106712409346361594u);
                    case 57:  return new ulong4( 5525364615810306701u, 11855206026704935156u, 11344868740897365300u, 108801712734172003u);
                    case 58:  return new ulong4( 9274143661888462646u,  4478365862348432381u, 18010077872551661771u, 110931922223466333u);
                    case 59:  return new ulong4(12604141221930060148u,  8930937759942591500u,  9382183116147201338u, 113103838707570263u);
                    case 60:  return new ulong4(14513929377491886653u,  1410646149696279084u,   587092196850797612u, 115318278760358235u);
                    case 61:  return new ulong4( 2226851524999454362u,  7717102471110805679u,  7187441550995571734u, 117576074943260147u);
                    case 62:  return new ulong4( 5527526061344932763u,  2347100676188369132u, 16976241418824030445u, 119878076118278875u);
                    case 63:  return new ulong4( 6088479778147221611u, 17669593130014777580u, 10991124207197663546u, 122225147767136307u);
                    case 64:  return new ulong4(11107734086759692041u,  3391795220306863431u, 17233960908859089158u, 124618172316667879u);
                    case 65:  return new ulong4( 7913172514655155198u, 17726879005381242552u,   641069866244011540u, 127058049470587962u);
                    case 66:  return new ulong4(12596991768458713949u, 15714785522479904446u,  6035972567136116512u, 129545696547750811u);
                    case 67:  return new ulong4(16901996933781815980u,  4275085211437148707u, 14091642539965169063u, 132082048827034281u);
                    case 68:  return new ulong4( 7524574627987869240u, 15661204384239316051u,  2444526454225712267u, 134668059898975949u);
                    case 69:  return new ulong4( 8199251625090479942u,  6803282222165044067u, 16064817666437851504u, 137304702024293857u);
                    case 70:  return new ulong4( 4453256673338111920u, 15269922543084434181u,  3139961729834750852u, 139992966499426682u);
                    case 71:  return new ulong4(15841763546372731299u,  3013174075437671812u,  4383755396295695606u, 142733864029230733u);
                    case 72:  return new ulong4( 9771896230907310329u,  4900659362437687569u, 12386126719044266361u,  72764212553486967u);
                    case 73:  return new ulong4( 9420455527449565190u,  1859606122611023693u,  6555040298902684281u,  74188850200884818u);
                    case 74:  return new ulong4( 5146105983135678095u,  2287300449992174951u,  4325371679080264751u,  75641380576797959u);
                    case 75:  return new ulong4(11019359372592553360u,  8422686425957443718u,  7175176077944048210u,  77122349788024458u);
                    case 76:  return new ulong4(11005742969399620716u,  4132174559240043701u,  9372258443096612118u,  78632314633490790u);
                    case 77:  return new ulong4( 8887589641394725840u,  8029899502466543662u, 14582206497241572853u,  80171842813591127u);
                    case 78:  return new ulong4(  360247523705545899u, 12568341805293354211u, 14653258284762517866u,  81741513143625247u);
                    case 79:  return new ulong4(12314272731984275834u,  4740745023227177044u,  6141631472368337539u,  83341915771415304u);
                    case 80:  return new ulong4(  441052047733984759u,  7940090120939869826u, 11750200619921094248u,  84973652399183278u);
                    case 81:  return new ulong4( 3436657868127012749u,  9187006432149937667u, 16389726097323041290u,  86637336509772529u);
                    case 82:  return new ulong4(13490220260784534044u, 15339072891382896702u,  8846102360835316895u,  88333593597298497u);
                    case 83:  return new ulong4( 4125672032094859833u,   158347675704003277u, 10592598512749774447u,  90063061402315272u);
                    case 84:  return new ulong4(12189928252974395775u,  2386931199439295891u,  7009030566469913276u,  91826390151586454u);
                    case 85:  return new ulong4( 9256479608339282969u,  2844900158963599229u, 11148388908923225596u,  93624242802550437u);
                    case 86:  return new ulong4(11584393507658707408u,  2863659090805147914u,  9873421561981063551u,  95457295292572042u);
                    case 87:  return new ulong4(13984297296943171390u,  1931468383973130608u, 12905719743235082319u,  97326236793074198u);
                    case 88:  return new ulong4( 5837045222254987499u, 10213498696735864176u, 14893951506257020749u,  99231769968645227u);
        
                    default: throw Assert.Unreachable();
                }
            }
            static ulong POW5_ERRORS(uint index)
            {
                switch (index)
                {
                    case 0:   return 0x0000000000000000;
                    case 1:   return 0x0000000000000000;
                    case 2:   return 0x0000000000000000;
                    case 3:   return 0x9555596400000000;
                    case 4:   return 0x65a6569525565555;
                    case 5:   return 0x4415551445449655;
                    case 6:   return 0x5105015504144541;
                    case 7:   return 0x65a69969a6965964;
                    case 8:   return 0x5054955969959656;
                    case 9:   return 0x5105154515554145;
                    case 10:  return 0x4055511051591555;
                    case 11:  return 0x5500514455550115;
                    case 12:  return 0x0041140014145515;
                    case 13:  return 0x1005440545511051;
                    case 14:  return 0x0014405450411004;
                    case 15:  return 0x0414440010500000;
                    case 16:  return 0x0044000440010040;
                    case 17:  return 0x5551155000004001;
                    case 18:  return 0x4554555454544114;
                    case 19:  return 0x5150045544005441;
                    case 20:  return 0x0001111400054501;
                    case 21:  return 0x6550955555554554;
                    case 22:  return 0x1504159645559559;
                    case 23:  return 0x4105055141454545;
                    case 24:  return 0x1411541410405454;
                    case 25:  return 0x0415555044545555;
                    case 26:  return 0x0014154115405550;
                    case 27:  return 0x1540055040411445;
                    case 28:  return 0x0000000500000000;
                    case 29:  return 0x5644000000000000;
                    case 30:  return 0x1155555591596555;
                    case 31:  return 0x0410440054569565;
                    case 32:  return 0x5145100010010005;
                    case 33:  return 0x0555041405500150;
                    case 34:  return 0x4141450455140450;
                    case 35:  return 0x0000000144000140;
                    case 36:  return 0x5114004001105410;
                    case 37:  return 0x4444100404005504;
                    case 38:  return 0x0414014410001015;
                    case 39:  return 0x5145055155555015;
                    case 40:  return 0x0141041444445540;
                    case 41:  return 0x0000100451541414;
                    case 42:  return 0x4105041104155550;
                    case 43:  return 0x0500501150451145;
                    case 44:  return 0x1001050000004114;
                    case 45:  return 0x5551504400141045;
                    case 46:  return 0x5110545410151454;
                    case 47:  return 0x0100001400004040;
                    case 48:  return 0x5040010111040000;
                    case 49:  return 0x0140000150541100;
                    case 50:  return 0x4400140400104110;
                    case 51:  return 0x5011014405545004;
                    case 52:  return 0x0000000044155440;
                    case 53:  return 0x0000000010000000;
                    case 54:  return 0x1100401444440001;
                    case 55:  return 0x0040401010055111;
                    case 56:  return 0x5155155551405454;
                    case 57:  return 0x0444440015514411;
                    case 58:  return 0x0054505054014101;
                    case 59:  return 0x0451015441115511;
                    case 60:  return 0x1541411401140551;
                    case 61:  return 0x4155104514445110;
                    case 62:  return 0x4141145450145515;
                    case 63:  return 0x5451445055155050;
                    case 64:  return 0x4400515554110054;
                    case 65:  return 0x5111145104501151;
                    case 66:  return 0x565a655455500501;
                    case 67:  return 0x5565555555525955;
                    case 68:  return 0x0550511500405695;
                    case 69:  return 0x4415504051054544;
                    case 70:  return 0x6555595965555554;
                    case 71:  return 0x0100915915555655;
                    case 72:  return 0x5540001510001001;
                    case 73:  return 0x5450051414000544;
                    case 74:  return 0x1405010555555551;
                    case 75:  return 0x5555515555644155;
                    case 76:  return 0x5555055595496555;
                    case 77:  return 0x5451045004415000;
                    case 78:  return 0x5450510144040144;
                    case 79:  return 0x5554155555556455;
                    case 80:  return 0x5051555495415555;
                    case 81:  return 0x5555554555555545;
                    case 82:  return 0x0000000010005455;
                    case 83:  return 0x4000005000040000;
                    case 84:  return 0x5565555555555954;
                    case 85:  return 0x5554559555555505;
                    case 86:  return 0x9645545495552555;
                    case 87:  return 0x4000400055955564;
                    case 88:  return 0x0040000000000001;
                    case 89:  return 0x4004100100000000;
                    case 90:  return 0x5540040440000411;
                    case 91:  return 0x4565555955545644;
                    case 92:  return 0x1140659549651556;
                    case 93:  return 0x0100000410010000;
                    case 94:  return 0x5555515400004001;
                    case 95:  return 0x5955545555155255;
                    case 96:  return 0x5151055545505556;
                    case 97:  return 0x5051454510554515;
                    case 98:  return 0x0501500050415554;
                    case 99:  return 0x5044154005441005;
                    case 100: return 0x1455445450550455;
                    case 101: return 0x0010144055144545;
                    case 102: return 0x0000401100000004;
                    case 103: return 0x1050145050000010;
                    case 104: return 0x0415004554011540;
                    case 105: return 0x1000510100151150;
                    case 106: return 0x0100040400001144;
                    case 107: return 0x0000000000000000;
                    case 108: return 0x0550004400000100;
                    case 109: return 0x0151145041451151;
                    case 110: return 0x0000400400005450;
                    case 111: return 0x0000100044010004;
                    case 112: return 0x0100054100050040;
                    case 113: return 0x0504400005410010;
                    case 114: return 0x4011410445500105;
                    case 115: return 0x0000404000144411;
                    case 116: return 0x0101504404500000;
                    case 117: return 0x0000005044400400;
                    case 118: return 0x0000000014000100;
                    case 119: return 0x0404440414000000;
                    case 120: return 0x5554100410000140;
                    case 121: return 0x4555455544505555;
                    case 122: return 0x5454105055455455;
                    case 123: return 0x0115454155454015;
                    case 124: return 0x4404110000045100;
                    case 125: return 0x4400001100101501;
                    case 126: return 0x6596955956966a94;
                    case 127: return 0x0040655955665965;
                    case 128: return 0x5554144400100155;
                    case 129: return 0xa549495401011041;
                    case 130: return 0x5596555565955555;
                    case 131: return 0x5569965959549555;
                    case 132: return 0x969565a655555456;
                    case 133: return 0x0000001000000000;
                    case 134: return 0x0000000040000140;
                    case 135: return 0x0000040100000000;
                    case 136: return 0x1415454400000000;
                    case 137: return 0x5410415411454114;
                    case 138: return 0x0400040104000154;
                    case 139: return 0x0504045000000411;
                    case 140: return 0x0000001000000010;
                    case 141: return 0x5554000000001040;
                    case 142: return 0x5549155551556595;
                    case 143: return 0x1455541055515555;
                    case 144: return 0x0510555454554541;
                    case 145: return 0x9555555555540455;
                    case 146: return 0x6455456555556465;
                    case 147: return 0x4524565555654514;
                    case 148: return 0x5554655255559545;
                    case 149: return 0x9555455441155556;
                    case 150: return 0x0000000051515555;
                    case 151: return 0x0010005040000550;
                    case 152: return 0x5044044040000000;
                    case 153: return 0x1045040440010500;
                    case 154: return 0x0000400000040000;
                    case 155: return 0x0000000000000000;
        
                    default: throw Assert.Unreachable();
                }
            }
        
            // floor(log_10(2^e)).
            static uint log10Pow2(uint e)
            {
                // The first value this approximation fails for is 2^1651 which is just greater than 10^297.
                return (uint)((e * 169464822037455ul) >> 49);
            }
            // Returns floor(log_10(5^e)).
            static uint log10Pow5(uint e)
            {
                // The first value this approximation fails for is 5^2621 which is just greater than 10^1832.
                return (uint)((e * 196742565691928ul) >> 48);
            }
            // e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 32768.
            static uint pow5bits(uint e)
            {
                return (uint)(((e * 163391164108059ul) >> 46) + 1);
            }
            // Returns true if value is divisible by 5^p.
            static bool multipleOfPowerOf5(UInt128 value, uint p)
            {
                Divider<UInt128> div5er = new Divider<UInt128>((UInt128)5);
        
                uint count = 0;
                while (value.IsNotZero)
                {
                    value /= div5er;
        
                    if (!div5er.EvenlyDivides(value))
                    {
                        break;
                    }
                    else
                    {
                        count++;
                    }
                }
        
                return count >= p;
            }
            // Returns true if value is divisible by 2^p.
            static bool multipleOfPowerOf2(UInt128 value, uint p)
            {
                return (value & ((((UInt128)1) << (int)p) - 1)).IsZero;
            }
        
            static ulong4 mul_128_256_shift(ulong2 a, ulong4 b, int shift, uint corr)
            {
                UInt128 b00 = (UInt128)a[0] * b[0];
                UInt128 b01 = (UInt128)a[0] * b[1];
                UInt128 b02 = (UInt128)a[0] * b[2];
                UInt128 b03 = (UInt128)a[0] * b[3];
                UInt128 b10 = (UInt128)a[1] * b[0];
                UInt128 b11 = (UInt128)a[1] * b[1];
                UInt128 b12 = (UInt128)a[1] * b[2];
                UInt128 b13 = (UInt128)a[1] * b[3];
        
                UInt128 s1 = b01 + b10;
                ulong c1 = tobyte(s1 < b01);
                UInt128 s2 = b02 + b11;
                ulong c2 = tobyte(s2 < b02);
                UInt128 s3 = b03 + b12;
                ulong c3 = tobyte(s3 < b03);
        
                UInt128 p0 = b00 + new UInt128(0, s1.lo64);
                ulong d0 = tobyte(p0 < b00);
                UInt128 q1 = s2 + new UInt128(s1.hi64, s3.lo64);
                ulong d1 = tobyte(q1 < s2);
                UInt128 p1 = q1 + new UInt128(d0, c1);
                ulong d2 = tobyte(p1 < q1);
                UInt128 p2 = b13 + s3.hi64 + new UInt128(c2 + d1 + d2, c3);
        
                if (shift < 128)
                {
                    UInt128 r0 = corr + ((p0 >> shift) | (p1 << (128 - shift)));
                    UInt128 r1 = ((p1 >> shift) | (p2 << (128 - shift))) + tobyte(r0 < corr);
        
                    return new ulong4(r0.lo64, r0.hi64, r1.lo64, r1.hi64);
                }
                else if (shift == 128)
                {
                    UInt128 r0 = corr + p1;
                    UInt128 r1 = p2 + tobyte(r0 < corr);
        
                    return new ulong4(r0.lo64, r0.hi64, r1.lo64, r1.hi64);
                }
                else
                {
                    UInt128 r0 = corr + ((p1 >> (shift - 128)) | (p2 << (256 - shift)));
                    UInt128 r1 = (p2 >> (shift - 128)) + tobyte(r0 < corr);
        
                    return new ulong4(r0.lo64, r0.hi64, r1.lo64, r1.hi64);
                }
            }
            static UInt128 mulShift(UInt128 m, ulong4 mul, int j)
            {
                ulong4 result = mul_128_256_shift(new ulong2(m.lo64, m.hi64), mul, j, 0);
        
                return new UInt128(result[0], result[1]);
            }
            static ulong4 generic_computePow5(uint i)
            {
                uint base1 = i / POW5_TABLE_SIZE;
                uint base2 = base1 * POW5_TABLE_SIZE;
                ulong4 mul = GENERIC_POW5_SPLIT(base1);
                if (i == base2)
                {
                    return mul;
                }
                else
                {
                    uint offset = i - base2;
                    ulong2 m = GENERIC_POW5_TABLE(offset);
                    uint delta = pow5bits(i) - pow5bits(base2);
                    uint corr = (uint)((POW5_ERRORS(i / 32) >> (int)(2 * (i % 32))) & 3);
                    return mul_128_256_shift(m, mul, (int)delta, corr);
                }
            }
            static ulong4 generic_computeInvPow5(uint i)
            {
                uint base1 = (i + POW5_TABLE_SIZE - 1) / POW5_TABLE_SIZE;
                uint base2 = base1 * POW5_TABLE_SIZE;
                ulong4 mul = GENERIC_POW5_INV_SPLIT(base1);
        
                if (i == base2)
                {
                    mul.x++;
        
                    return mul;
                }
                else
                {
                    uint offset = base2 - i;
                    ulong2 m = GENERIC_POW5_TABLE(offset); // 5^offset
                    uint delta = pow5bits(base2) - pow5bits(i);
                    uint corr = (uint)((POW5_INV_ERRORS(i / 32) >> (int)(2 * (i % 32))) & 3) + 1;
        
                    return mul_128_256_shift(m, mul, (int)delta, corr);
                }
            }
            static void PrintNaN([NoAlias] char* result, [NoAlias] ref int length)
            {
                length = 0;
                
                result[length++] = 'N';
                result[length++] = 'a';
                result[length++] = 'N';
            }
            static void PrintInfinity([NoAlias] char* result, [NoAlias] ref int length)
            {
                result[length++] = 'I';
                result[length++] = 'n';
                result[length++] = 'f';
                result[length++] = 'i';
                result[length++] = 'n';
                result[length++] = 'i';
                result[length++] = 't';
                result[length++] = 'y';
            }
            static void PrintExponent(uint exponent, [NoAlias] char* result, [NoAlias] ref int length)
            {
                if (exponent == 0) return;


                result[length++] = 'E';
                bool eNeg = (int)exponent < 0;
                result[length++] = eNeg ? '-' : '+';
                exponent = eNeg ? (uint)-(int)exponent : exponent;
                
                uint elength = intlog10((ushort)exponent);
                if (elength == 0)
                {
                    result[length++] = '0';
                }
                length++;
                length += (int)elength;
                elength++;
                for (uint i = 1; i <= elength; i++)
                {
                    exponent = divrem(exponent, 10, out uint digit);
                    result[length - i] = (char)('0' + digit);
                }
            }
            static void PrintDecimals(UInt128 mantissa, uint olength, Divider<UInt128> div10er, [NoAlias] char* result, [NoAlias] ref int length)
            {
                int previousLength = length;
                if (olength > 1)
                {
                    result[previousLength + 1] = '.';
                    length++;
                }
                length += (int)olength;

                for (uint i = 1; i < olength; i++)
                {
                    mantissa = div10er.DivRem(mantissa, out UInt128 digit);
                    result[length - i] = (char)('0' + digit.lo64);
                }
                result[previousLength] = (char)('0' + (uint)(mantissa % div10er));
            }
            static void PrintDigits(UInt128 mantissa, uint exponent, Divider<UInt128> div10er, [NoAlias] char* result, [NoAlias] ref int length)
            {
                uint olength = (uint)intlog10(mantissa);
        
                PrintDecimals(mantissa, olength + 1, div10er, result, ref length);
                PrintExponent(exponent + olength, result, ref length);
            }
        

            ulong exponent = value.hi64 & bitmask64((ulong)EXPONENT_BITS, MANTISSA_BITS - (8 * sizeof(ulong)));
            UInt128 mantissa = value & bitmask128((ulong)MANTISSA_BITS);
        
            long e2 = (long)(EXPONENT_BIAS - MANTISSA_BITS - 2) << (MANTISSA_BITS - (8 * sizeof(ulong)));
            e2 += (long)exponent;
            UInt128 m2 = mantissa;
            bool mantissaNonZero = mantissa.IsNotZero;
            bool exponentNonZero = exponent != 0;
        
            Divider<UInt128> div10er;
            result[0] = '-';
            length = (int)(value.hi64 >> 63) 
                   & (tobyte(mantissaNonZero) | tobyte(exponentNonZero));
            
            if (Hint.Likely(exponentNonZero))
            {
                if (Hint.Unlikely(exponent == SIGNALING_EXPONENT.hi64))
                {
                    if (mantissaNonZero)
                    {
                        PrintNaN(result, ref length);
                    }
                    else
                    {
                        PrintInfinity(result, ref length);
                    }
        
                    return;
                }

                m2 |= (UInt128)1 << MANTISSA_BITS;
            }
            else if (Hint.Unlikely(mantissaNonZero))
            {
                e2 += 1L << (MANTISSA_BITS - (8 * sizeof(ulong)));
            }
            else
            {
                div10er = new Divider<UInt128>((UInt128)10);
            
                PrintDigits(mantissa, (uint)(exponent >> (MANTISSA_BITS - (8 * sizeof(ulong)))), div10er, result, ref length);
                return;
            }
        
            bool odd = (m2.lo64 & 1) == 1;
        
            m2 <<= 2;
            uint mmShift = tobyte(mantissaNonZero | !exponentNonZero);
        
            UInt128 vr, vp, vm;
            int e10;
            bool vmIsTrailingZeros = false;
            bool vrIsTrailingZeros = false;
            bool e2NonNegative = e2 >= 0;
            e2 >>= MANTISSA_BITS - (8 * sizeof(ulong));
            if (e2NonNegative)
            {
                uint q = log10Pow2((uint)e2) - tobyte(e2 > 3);
                e10 = (int)q;
                int k = FLOAT_128_POW5_INV_BITCOUNT + (int)pow5bits(q) - 1;
                int i = -(int)e2 + (int)q + k;
                ulong4 pow5 = generic_computeInvPow5(q);
                vr = mulShift(m2, pow5, i);
                vp = mulShift(m2 + 2, pow5, i);
                vm = mulShift(m2 - 1 - mmShift, pow5, i);
        
                if (q <= 55)
                {
                    Divider<UInt128> div5er = new Divider<UInt128>((UInt128)5);
        
                    if (div5er.EvenlyDivides(m2))
                    {
                        vrIsTrailingZeros = multipleOfPowerOf5(m2, q - 1);
                    }
                    else if (odd)
                    {
                        vp -= tobyte(multipleOfPowerOf5(m2 + 2, q));
                    }
                    else
                    {
                        vmIsTrailingZeros = multipleOfPowerOf5(m2 - 1 - mmShift, q);
                    }
                }
            }
            else
            {
                uint q = log10Pow5((uint)-(int)e2) - tobyte(-(int)e2 > 1);
                e10 = (int)q + (int)e2;
                int i = -(int)e2 - (int)q;
                int k = (int)pow5bits((uint)i) - FLOAT_128_POW5_BITCOUNT;
                int j = (int)q - k;
                ulong4 pow5 = generic_computePow5((uint)i);
                vr = mulShift(m2, pow5, j);
                vp = mulShift(m2 + 2, pow5, j);
                vm = mulShift(m2 - 1 - mmShift, pow5, j);
                if (q <= 1)
                {
                    vrIsTrailingZeros = true;
                    if (odd)
                    {
                        vp--;
                    }
                    else
                    {
                        vmIsTrailingZeros = mmShift == 1;
                    }
                }
                else if (q < 127)
                {
                    vrIsTrailingZeros = multipleOfPowerOf2(m2, q - 1);
                }
            }
        
            div10er = new Divider<UInt128>((UInt128)10);
            uint removed = 0;
            byte lastRemovedDigit = 0;
        
            while (vp / div10er > vm / div10er)
            {
                vmIsTrailingZeros &= div10er.EvenlyDivides(vm);
                vrIsTrailingZeros &= lastRemovedDigit == 0;
                lastRemovedDigit = (byte)(vr % div10er);
                vr /= div10er;
                vp /= div10er;
                vm /= div10er;
                removed++;
            }
            if (vmIsTrailingZeros)
            {
                while (div10er.EvenlyDivides(vm))
                {
                    vrIsTrailingZeros &= lastRemovedDigit == 0;
                    lastRemovedDigit = (byte)(vr % div10er);
                    vr /= div10er;
                    vp /= div10er;
                    vm /= div10er;
                    removed++;
                }
            }
            if (vrIsTrailingZeros & (lastRemovedDigit == 5) & ((vr.lo64 & 1) == 0))
            {
                lastRemovedDigit = 4;
            }
        
            mantissa = vr + tobyte(((vr == vm) & (odd | !vmIsTrailingZeros)) | (lastRemovedDigit >= 5));
            exponent = (uint)e10 + removed;
        
            PrintDigits(mantissa, (uint)exponent, div10er, result, ref length);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override readonly string ToString()
        {
            char* result = stackalloc char[53];
            ToStringNative(result, out int length);

            return new string(result, 0, length);
        }
        
        public readonly string ToString(string format, IFormatProvider formatProvider)
        {
            return ToString();
        }
        
        public readonly string ToString(IFormatProvider formatProvider)
        {
            return ToString(null, formatProvider);
        }
        
        public readonly string ToString(string format)
        {
            return ToString(format, null);
        }
    }
}