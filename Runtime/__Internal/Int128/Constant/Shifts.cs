using System.Runtime.CompilerServices;

namespace MaxMath
{
    unsafe public partial struct UInt128
    {
        internal static partial class __const
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static UInt128 shluint128(UInt128 value, int n) 
            {
                switch (n)
                {
                    case 1:   return new UInt128(value.lo64 << 1,     (value.hi64 << 1)  | (value.lo64 >> (64 - 1)));
                    case 2:   return new UInt128(value.lo64 << 2,     (value.hi64 << 2)  | (value.lo64 >> (64 - 2)));
                    case 3:   return new UInt128(value.lo64 << 3,     (value.hi64 << 3)  | (value.lo64 >> (64 - 3)));
                    case 4:   return new UInt128(value.lo64 << 4,     (value.hi64 << 4)  | (value.lo64 >> (64 - 4)));
                    case 5:   return new UInt128(value.lo64 << 5,     (value.hi64 << 5)  | (value.lo64 >> (64 - 5)));
                    case 6:   return new UInt128(value.lo64 << 6,     (value.hi64 << 6)  | (value.lo64 >> (64 - 6)));
                    case 7:   return new UInt128(value.lo64 << 7,     (value.hi64 << 7)  | (value.lo64 >> (64 - 7)));
                    case 8:   return new UInt128(value.lo64 << 8,     (value.hi64 << 8)  | (value.lo64 >> (64 - 8)));
                    case 9:   return new UInt128(value.lo64 << 9,     (value.hi64 << 9)  | (value.lo64 >> (64 - 9)));
                    case 10:  return new UInt128(value.lo64 << 10,    (value.hi64 << 10) | (value.lo64 >> (64 - 10)));
                    case 11:  return new UInt128(value.lo64 << 11,    (value.hi64 << 11) | (value.lo64 >> (64 - 11)));
                    case 12:  return new UInt128(value.lo64 << 12,    (value.hi64 << 12) | (value.lo64 >> (64 - 12)));
                    case 13:  return new UInt128(value.lo64 << 13,    (value.hi64 << 13) | (value.lo64 >> (64 - 13)));
                    case 14:  return new UInt128(value.lo64 << 14,    (value.hi64 << 14) | (value.lo64 >> (64 - 14)));
                    case 15:  return new UInt128(value.lo64 << 15,    (value.hi64 << 15) | (value.lo64 >> (64 - 15)));
                    case 16:  return new UInt128(value.lo64 << 16,    (value.hi64 << 16) | (value.lo64 >> (64 - 16)));
                    case 17:  return new UInt128(value.lo64 << 17,    (value.hi64 << 17) | (value.lo64 >> (64 - 17)));
                    case 18:  return new UInt128(value.lo64 << 18,    (value.hi64 << 18) | (value.lo64 >> (64 - 18)));
                    case 19:  return new UInt128(value.lo64 << 19,    (value.hi64 << 19) | (value.lo64 >> (64 - 19)));
                    case 20:  return new UInt128(value.lo64 << 20,    (value.hi64 << 20) | (value.lo64 >> (64 - 20)));
                    case 21:  return new UInt128(value.lo64 << 21,    (value.hi64 << 21) | (value.lo64 >> (64 - 21)));
                    case 22:  return new UInt128(value.lo64 << 22,    (value.hi64 << 22) | (value.lo64 >> (64 - 22)));
                    case 23:  return new UInt128(value.lo64 << 23,    (value.hi64 << 23) | (value.lo64 >> (64 - 23)));
                    case 24:  return new UInt128(value.lo64 << 24,    (value.hi64 << 24) | (value.lo64 >> (64 - 24)));
                    case 25:  return new UInt128(value.lo64 << 25,    (value.hi64 << 25) | (value.lo64 >> (64 - 25)));
                    case 26:  return new UInt128(value.lo64 << 26,    (value.hi64 << 26) | (value.lo64 >> (64 - 26)));
                    case 27:  return new UInt128(value.lo64 << 27,    (value.hi64 << 27) | (value.lo64 >> (64 - 27)));
                    case 28:  return new UInt128(value.lo64 << 28,    (value.hi64 << 28) | (value.lo64 >> (64 - 28)));
                    case 29:  return new UInt128(value.lo64 << 29,    (value.hi64 << 29) | (value.lo64 >> (64 - 29)));
                    case 30:  return new UInt128(value.lo64 << 30,    (value.hi64 << 30) | (value.lo64 >> (64 - 30)));
                    case 31:  return new UInt128(value.lo64 << 31,    (value.hi64 << 31) | (value.lo64 >> (64 - 31)));
                    case 32:  return new UInt128(value.lo64 << 32,    (value.hi64 << 32) | (value.lo64 >> (64 - 32)));
                    case 33:  return new UInt128(value.lo64 << 33,    (value.hi64 << 33) | (value.lo64 >> (64 - 33)));
                    case 34:  return new UInt128(value.lo64 << 34,    (value.hi64 << 34) | (value.lo64 >> (64 - 34)));
                    case 35:  return new UInt128(value.lo64 << 35,    (value.hi64 << 35) | (value.lo64 >> (64 - 35)));
                    case 36:  return new UInt128(value.lo64 << 36,    (value.hi64 << 36) | (value.lo64 >> (64 - 36)));
                    case 37:  return new UInt128(value.lo64 << 37,    (value.hi64 << 37) | (value.lo64 >> (64 - 37)));
                    case 38:  return new UInt128(value.lo64 << 38,    (value.hi64 << 38) | (value.lo64 >> (64 - 38)));
                    case 39:  return new UInt128(value.lo64 << 39,    (value.hi64 << 39) | (value.lo64 >> (64 - 39)));
                    case 40:  return new UInt128(value.lo64 << 40,    (value.hi64 << 40) | (value.lo64 >> (64 - 40)));
                    case 41:  return new UInt128(value.lo64 << 41,    (value.hi64 << 41) | (value.lo64 >> (64 - 41)));
                    case 42:  return new UInt128(value.lo64 << 42,    (value.hi64 << 42) | (value.lo64 >> (64 - 42)));
                    case 43:  return new UInt128(value.lo64 << 43,    (value.hi64 << 43) | (value.lo64 >> (64 - 43)));
                    case 44:  return new UInt128(value.lo64 << 44,    (value.hi64 << 44) | (value.lo64 >> (64 - 44)));
                    case 45:  return new UInt128(value.lo64 << 45,    (value.hi64 << 45) | (value.lo64 >> (64 - 45)));
                    case 46:  return new UInt128(value.lo64 << 46,    (value.hi64 << 46) | (value.lo64 >> (64 - 46)));
                    case 47:  return new UInt128(value.lo64 << 47,    (value.hi64 << 47) | (value.lo64 >> (64 - 47)));
                    case 48:  return new UInt128(value.lo64 << 48,    (value.hi64 << 48) | (value.lo64 >> (64 - 48)));
                    case 49:  return new UInt128(value.lo64 << 49,    (value.hi64 << 49) | (value.lo64 >> (64 - 49)));
                    case 50:  return new UInt128(value.lo64 << 50,    (value.hi64 << 50) | (value.lo64 >> (64 - 50)));
                    case 51:  return new UInt128(value.lo64 << 51,    (value.hi64 << 51) | (value.lo64 >> (64 - 51)));
                    case 52:  return new UInt128(value.lo64 << 52,    (value.hi64 << 52) | (value.lo64 >> (64 - 52)));
                    case 53:  return new UInt128(value.lo64 << 53,    (value.hi64 << 53) | (value.lo64 >> (64 - 53)));
                    case 54:  return new UInt128(value.lo64 << 54,    (value.hi64 << 54) | (value.lo64 >> (64 - 54)));
                    case 55:  return new UInt128(value.lo64 << 55,    (value.hi64 << 55) | (value.lo64 >> (64 - 55)));
                    case 56:  return new UInt128(value.lo64 << 56,    (value.hi64 << 56) | (value.lo64 >> (64 - 56)));
                    case 57:  return new UInt128(value.lo64 << 57,    (value.hi64 << 57) | (value.lo64 >> (64 - 57)));
                    case 58:  return new UInt128(value.lo64 << 58,    (value.hi64 << 58) | (value.lo64 >> (64 - 58)));
                    case 59:  return new UInt128(value.lo64 << 59,    (value.hi64 << 59) | (value.lo64 >> (64 - 59)));
                    case 60:  return new UInt128(value.lo64 << 60,    (value.hi64 << 60) | (value.lo64 >> (64 - 60)));
                    case 61:  return new UInt128(value.lo64 << 61,    (value.hi64 << 61) | (value.lo64 >> (64 - 61)));
                    case 62:  return new UInt128(value.lo64 << 62,    (value.hi64 << 62) | (value.lo64 >> (64 - 62)));
                    case 63:  return new UInt128(value.lo64 << 63,    (value.hi64 << 63) | (value.lo64 >> (64 - 63)));
                    case 64:  return new UInt128(0,     value.lo64);
                    case 65:  return new UInt128(0,     value.lo64 << 1);
                    case 66:  return new UInt128(0,     value.lo64 << 2);
                    case 67:  return new UInt128(0,     value.lo64 << 3);
                    case 68:  return new UInt128(0,     value.lo64 << 4);
                    case 69:  return new UInt128(0,     value.lo64 << 5);
                    case 70:  return new UInt128(0,     value.lo64 << 6);
                    case 71:  return new UInt128(0,     value.lo64 << 7);
                    case 72:  return new UInt128(0,     value.lo64 << 8);
                    case 73:  return new UInt128(0,     value.lo64 << 9);
                    case 74:  return new UInt128(0,     value.lo64 << 10);
                    case 75:  return new UInt128(0,     value.lo64 << 11);
                    case 76:  return new UInt128(0,     value.lo64 << 12);
                    case 77:  return new UInt128(0,     value.lo64 << 13);
                    case 78:  return new UInt128(0,     value.lo64 << 14);
                    case 79:  return new UInt128(0,     value.lo64 << 15);
                    case 80:  return new UInt128(0,     value.lo64 << 16);
                    case 81:  return new UInt128(0,     value.lo64 << 17);
                    case 82:  return new UInt128(0,     value.lo64 << 18);
                    case 83:  return new UInt128(0,     value.lo64 << 19);
                    case 84:  return new UInt128(0,     value.lo64 << 20);
                    case 85:  return new UInt128(0,     value.lo64 << 21);
                    case 86:  return new UInt128(0,     value.lo64 << 22);
                    case 87:  return new UInt128(0,     value.lo64 << 23);
                    case 88:  return new UInt128(0,     value.lo64 << 24);
                    case 89:  return new UInt128(0,     value.lo64 << 25);
                    case 90:  return new UInt128(0,     value.lo64 << 26);
                    case 91:  return new UInt128(0,     value.lo64 << 27);
                    case 92:  return new UInt128(0,     value.lo64 << 28);
                    case 93:  return new UInt128(0,     value.lo64 << 29);
                    case 94:  return new UInt128(0,     value.lo64 << 30);
                    case 95:  return new UInt128(0,     value.lo64 << 31);
                    case 96:  return new UInt128(0,     value.lo64 << 32);
                    case 97:  return new UInt128(0,     value.lo64 << 33);
                    case 98:  return new UInt128(0,     value.lo64 << 34);
                    case 99:  return new UInt128(0,     value.lo64 << 35);
                    case 100: return new UInt128(0,     value.lo64 << 36);
                    case 101: return new UInt128(0,     value.lo64 << 37);
                    case 102: return new UInt128(0,     value.lo64 << 38);
                    case 103: return new UInt128(0,     value.lo64 << 39);
                    case 104: return new UInt128(0,     value.lo64 << 40);
                    case 105: return new UInt128(0,     value.lo64 << 41);
                    case 106: return new UInt128(0,     value.lo64 << 42);
                    case 107: return new UInt128(0,     value.lo64 << 43);
                    case 108: return new UInt128(0,     value.lo64 << 44);
                    case 109: return new UInt128(0,     value.lo64 << 45);
                    case 110: return new UInt128(0,     value.lo64 << 46);
                    case 111: return new UInt128(0,     value.lo64 << 47);
                    case 112: return new UInt128(0,     value.lo64 << 48);
                    case 113: return new UInt128(0,     value.lo64 << 49);
                    case 114: return new UInt128(0,     value.lo64 << 50);
                    case 115: return new UInt128(0,     value.lo64 << 51);
                    case 116: return new UInt128(0,     value.lo64 << 52);
                    case 117: return new UInt128(0,     value.lo64 << 53);
                    case 118: return new UInt128(0,     value.lo64 << 54);
                    case 119: return new UInt128(0,     value.lo64 << 55);
                    case 120: return new UInt128(0,     value.lo64 << 56);
                    case 121: return new UInt128(0,     value.lo64 << 57);
                    case 122: return new UInt128(0,     value.lo64 << 58);
                    case 123: return new UInt128(0,     value.lo64 << 59);
                    case 124: return new UInt128(0,     value.lo64 << 60);
                    case 125: return new UInt128(0,     value.lo64 << 61);
                    case 126: return new UInt128(0,     value.lo64 << 62);
                    case 127: return new UInt128(0,     value.lo64 << 63);
    
                    default:  return value;
                }
            }
    
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static UInt128 shruint128(UInt128 value, int n) 
            {
                switch (n)
                {
                    case 1:   return new UInt128((value.lo64 >> 1)  | (value.hi64 << (64 - 1)),     value.hi64 >> 1);
                    case 2:   return new UInt128((value.lo64 >> 2)  | (value.hi64 << (64 - 2)),     value.hi64 >> 2);
                    case 3:   return new UInt128((value.lo64 >> 3)  | (value.hi64 << (64 - 3)),     value.hi64 >> 3);
                    case 4:   return new UInt128((value.lo64 >> 4)  | (value.hi64 << (64 - 4)),     value.hi64 >> 4);
                    case 5:   return new UInt128((value.lo64 >> 5)  | (value.hi64 << (64 - 5)),     value.hi64 >> 5);
                    case 6:   return new UInt128((value.lo64 >> 6)  | (value.hi64 << (64 - 6)),     value.hi64 >> 6);
                    case 7:   return new UInt128((value.lo64 >> 7)  | (value.hi64 << (64 - 7)),     value.hi64 >> 7);
                    case 8:   return new UInt128((value.lo64 >> 8)  | (value.hi64 << (64 - 8)),     value.hi64 >> 8);
                    case 9:   return new UInt128((value.lo64 >> 9)  | (value.hi64 << (64 - 9)),     value.hi64 >> 9);
                    case 10:  return new UInt128((value.lo64 >> 10) | (value.hi64 << (64 - 10)),    value.hi64 >> 10);
                    case 11:  return new UInt128((value.lo64 >> 11) | (value.hi64 << (64 - 11)),    value.hi64 >> 11);
                    case 12:  return new UInt128((value.lo64 >> 12) | (value.hi64 << (64 - 12)),    value.hi64 >> 12);
                    case 13:  return new UInt128((value.lo64 >> 13) | (value.hi64 << (64 - 13)),    value.hi64 >> 13);
                    case 14:  return new UInt128((value.lo64 >> 14) | (value.hi64 << (64 - 14)),    value.hi64 >> 14);
                    case 15:  return new UInt128((value.lo64 >> 15) | (value.hi64 << (64 - 15)),    value.hi64 >> 15);
                    case 16:  return new UInt128((value.lo64 >> 16) | (value.hi64 << (64 - 16)),    value.hi64 >> 16);
                    case 17:  return new UInt128((value.lo64 >> 17) | (value.hi64 << (64 - 17)),    value.hi64 >> 17);
                    case 18:  return new UInt128((value.lo64 >> 18) | (value.hi64 << (64 - 18)),    value.hi64 >> 18);
                    case 19:  return new UInt128((value.lo64 >> 19) | (value.hi64 << (64 - 19)),    value.hi64 >> 19);
                    case 20:  return new UInt128((value.lo64 >> 20) | (value.hi64 << (64 - 20)),    value.hi64 >> 20);
                    case 21:  return new UInt128((value.lo64 >> 21) | (value.hi64 << (64 - 21)),    value.hi64 >> 21);
                    case 22:  return new UInt128((value.lo64 >> 22) | (value.hi64 << (64 - 22)),    value.hi64 >> 22);
                    case 23:  return new UInt128((value.lo64 >> 23) | (value.hi64 << (64 - 23)),    value.hi64 >> 23);
                    case 24:  return new UInt128((value.lo64 >> 24) | (value.hi64 << (64 - 24)),    value.hi64 >> 24);
                    case 25:  return new UInt128((value.lo64 >> 25) | (value.hi64 << (64 - 25)),    value.hi64 >> 25);
                    case 26:  return new UInt128((value.lo64 >> 26) | (value.hi64 << (64 - 26)),    value.hi64 >> 26);
                    case 27:  return new UInt128((value.lo64 >> 27) | (value.hi64 << (64 - 27)),    value.hi64 >> 27);
                    case 28:  return new UInt128((value.lo64 >> 28) | (value.hi64 << (64 - 28)),    value.hi64 >> 28);
                    case 29:  return new UInt128((value.lo64 >> 29) | (value.hi64 << (64 - 29)),    value.hi64 >> 29);
                    case 30:  return new UInt128((value.lo64 >> 30) | (value.hi64 << (64 - 30)),    value.hi64 >> 30);
                    case 31:  return new UInt128((value.lo64 >> 31) | (value.hi64 << (64 - 31)),    value.hi64 >> 31);
                    case 32:  return new UInt128((value.lo64 >> 32) | (value.hi64 << (64 - 32)),    value.hi64 >> 32);
                    case 33:  return new UInt128((value.lo64 >> 33) | (value.hi64 << (64 - 33)),    value.hi64 >> 33);
                    case 34:  return new UInt128((value.lo64 >> 34) | (value.hi64 << (64 - 34)),    value.hi64 >> 34);
                    case 35:  return new UInt128((value.lo64 >> 35) | (value.hi64 << (64 - 35)),    value.hi64 >> 35);
                    case 36:  return new UInt128((value.lo64 >> 36) | (value.hi64 << (64 - 36)),    value.hi64 >> 36);
                    case 37:  return new UInt128((value.lo64 >> 37) | (value.hi64 << (64 - 37)),    value.hi64 >> 37);
                    case 38:  return new UInt128((value.lo64 >> 38) | (value.hi64 << (64 - 38)),    value.hi64 >> 38);
                    case 39:  return new UInt128((value.lo64 >> 39) | (value.hi64 << (64 - 39)),    value.hi64 >> 39);
                    case 40:  return new UInt128((value.lo64 >> 40) | (value.hi64 << (64 - 40)),    value.hi64 >> 40);
                    case 41:  return new UInt128((value.lo64 >> 41) | (value.hi64 << (64 - 41)),    value.hi64 >> 41);
                    case 42:  return new UInt128((value.lo64 >> 42) | (value.hi64 << (64 - 42)),    value.hi64 >> 42);
                    case 43:  return new UInt128((value.lo64 >> 43) | (value.hi64 << (64 - 43)),    value.hi64 >> 43);
                    case 44:  return new UInt128((value.lo64 >> 44) | (value.hi64 << (64 - 44)),    value.hi64 >> 44);
                    case 45:  return new UInt128((value.lo64 >> 45) | (value.hi64 << (64 - 45)),    value.hi64 >> 45);
                    case 46:  return new UInt128((value.lo64 >> 46) | (value.hi64 << (64 - 46)),    value.hi64 >> 46);
                    case 47:  return new UInt128((value.lo64 >> 47) | (value.hi64 << (64 - 47)),    value.hi64 >> 47);
                    case 48:  return new UInt128((value.lo64 >> 48) | (value.hi64 << (64 - 48)),    value.hi64 >> 48);
                    case 49:  return new UInt128((value.lo64 >> 49) | (value.hi64 << (64 - 49)),    value.hi64 >> 49);
                    case 50:  return new UInt128((value.lo64 >> 50) | (value.hi64 << (64 - 50)),    value.hi64 >> 50);
                    case 51:  return new UInt128((value.lo64 >> 51) | (value.hi64 << (64 - 51)),    value.hi64 >> 51);
                    case 52:  return new UInt128((value.lo64 >> 52) | (value.hi64 << (64 - 52)),    value.hi64 >> 52);
                    case 53:  return new UInt128((value.lo64 >> 53) | (value.hi64 << (64 - 53)),    value.hi64 >> 53);
                    case 54:  return new UInt128((value.lo64 >> 54) | (value.hi64 << (64 - 54)),    value.hi64 >> 54);
                    case 55:  return new UInt128((value.lo64 >> 55) | (value.hi64 << (64 - 55)),    value.hi64 >> 55);
                    case 56:  return new UInt128((value.lo64 >> 56) | (value.hi64 << (64 - 56)),    value.hi64 >> 56);
                    case 57:  return new UInt128((value.lo64 >> 57) | (value.hi64 << (64 - 57)),    value.hi64 >> 57);
                    case 58:  return new UInt128((value.lo64 >> 58) | (value.hi64 << (64 - 58)),    value.hi64 >> 58);
                    case 59:  return new UInt128((value.lo64 >> 59) | (value.hi64 << (64 - 59)),    value.hi64 >> 59);
                    case 60:  return new UInt128((value.lo64 >> 60) | (value.hi64 << (64 - 60)),    value.hi64 >> 60);
                    case 61:  return new UInt128((value.lo64 >> 61) | (value.hi64 << (64 - 61)),    value.hi64 >> 61);
                    case 62:  return new UInt128((value.lo64 >> 62) | (value.hi64 << (64 - 62)),    value.hi64 >> 62);
                    case 63:  return new UInt128((value.lo64 >> 63) | (value.hi64 << (64 - 63)),    value.hi64 >> 63);
                    case 64:  return new UInt128(value.hi64,           0);
                    case 65:  return new UInt128(value.hi64 >> 1,      0);
                    case 66:  return new UInt128(value.hi64 >> 2,      0);
                    case 67:  return new UInt128(value.hi64 >> 3,      0);
                    case 68:  return new UInt128(value.hi64 >> 4,      0);
                    case 69:  return new UInt128(value.hi64 >> 5,      0);
                    case 70:  return new UInt128(value.hi64 >> 6,      0);
                    case 71:  return new UInt128(value.hi64 >> 7,      0);
                    case 72:  return new UInt128(value.hi64 >> 8,      0);
                    case 73:  return new UInt128(value.hi64 >> 9,      0);
                    case 74:  return new UInt128(value.hi64 >> 10,     0);
                    case 75:  return new UInt128(value.hi64 >> 11,     0);
                    case 76:  return new UInt128(value.hi64 >> 12,     0);
                    case 77:  return new UInt128(value.hi64 >> 13,     0);
                    case 78:  return new UInt128(value.hi64 >> 14,     0);
                    case 79:  return new UInt128(value.hi64 >> 15,     0);
                    case 80:  return new UInt128(value.hi64 >> 16,     0);
                    case 81:  return new UInt128(value.hi64 >> 17,     0);
                    case 82:  return new UInt128(value.hi64 >> 18,     0);
                    case 83:  return new UInt128(value.hi64 >> 19,     0);
                    case 84:  return new UInt128(value.hi64 >> 20,     0);
                    case 85:  return new UInt128(value.hi64 >> 21,     0);
                    case 86:  return new UInt128(value.hi64 >> 22,     0);
                    case 87:  return new UInt128(value.hi64 >> 23,     0);
                    case 88:  return new UInt128(value.hi64 >> 24,     0);
                    case 89:  return new UInt128(value.hi64 >> 25,     0);
                    case 90:  return new UInt128(value.hi64 >> 26,     0);
                    case 91:  return new UInt128(value.hi64 >> 27,     0);
                    case 92:  return new UInt128(value.hi64 >> 28,     0);
                    case 93:  return new UInt128(value.hi64 >> 29,     0);
                    case 94:  return new UInt128(value.hi64 >> 30,     0);
                    case 95:  return new UInt128(value.hi64 >> 31,     0);
                    case 96:  return new UInt128(value.hi64 >> 32,     0);
                    case 97:  return new UInt128(value.hi64 >> 33,     0);
                    case 98:  return new UInt128(value.hi64 >> 34,     0);
                    case 99:  return new UInt128(value.hi64 >> 35,     0);
                    case 100: return new UInt128(value.hi64 >> 36,     0);
                    case 101: return new UInt128(value.hi64 >> 37,     0);
                    case 102: return new UInt128(value.hi64 >> 38,     0);
                    case 103: return new UInt128(value.hi64 >> 39,     0);
                    case 104: return new UInt128(value.hi64 >> 40,     0);
                    case 105: return new UInt128(value.hi64 >> 41,     0);
                    case 106: return new UInt128(value.hi64 >> 42,     0);
                    case 107: return new UInt128(value.hi64 >> 43,     0);
                    case 108: return new UInt128(value.hi64 >> 44,     0);
                    case 109: return new UInt128(value.hi64 >> 45,     0);
                    case 110: return new UInt128(value.hi64 >> 46,     0);
                    case 111: return new UInt128(value.hi64 >> 47,     0);
                    case 112: return new UInt128(value.hi64 >> 48,     0);
                    case 113: return new UInt128(value.hi64 >> 49,     0);
                    case 114: return new UInt128(value.hi64 >> 50,     0);
                    case 115: return new UInt128(value.hi64 >> 51,     0);
                    case 116: return new UInt128(value.hi64 >> 52,     0);
                    case 117: return new UInt128(value.hi64 >> 53,     0);
                    case 118: return new UInt128(value.hi64 >> 54,     0);
                    case 119: return new UInt128(value.hi64 >> 55,     0);
                    case 120: return new UInt128(value.hi64 >> 56,     0);
                    case 121: return new UInt128(value.hi64 >> 57,     0);
                    case 122: return new UInt128(value.hi64 >> 58,     0);
                    case 123: return new UInt128(value.hi64 >> 59,     0);
                    case 124: return new UInt128(value.hi64 >> 60,     0);
                    case 125: return new UInt128(value.hi64 >> 61,     0);
                    case 126: return new UInt128(value.hi64 >> 62,     0);
                    case 127: return new UInt128(value.hi64 >> 63,     0);
    
                    default:  return value;
                }
            }
    
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static Int128 sarint128(Int128 value, int n) 
            {
                switch (n)
                {
                    case 1:   return new Int128((value.lo64 >> 1)  | (value.hi64 << (64 - 1)),     (ulong)((long)value.hi64 >> 1));
                    case 2:   return new Int128((value.lo64 >> 2)  | (value.hi64 << (64 - 2)),     (ulong)((long)value.hi64 >> 2));
                    case 3:   return new Int128((value.lo64 >> 3)  | (value.hi64 << (64 - 3)),     (ulong)((long)value.hi64 >> 3));
                    case 4:   return new Int128((value.lo64 >> 4)  | (value.hi64 << (64 - 4)),     (ulong)((long)value.hi64 >> 4));
                    case 5:   return new Int128((value.lo64 >> 5)  | (value.hi64 << (64 - 5)),     (ulong)((long)value.hi64 >> 5));
                    case 6:   return new Int128((value.lo64 >> 6)  | (value.hi64 << (64 - 6)),     (ulong)((long)value.hi64 >> 6));
                    case 7:   return new Int128((value.lo64 >> 7)  | (value.hi64 << (64 - 7)),     (ulong)((long)value.hi64 >> 7));
                    case 8:   return new Int128((value.lo64 >> 8)  | (value.hi64 << (64 - 8)),     (ulong)((long)value.hi64 >> 8));
                    case 9:   return new Int128((value.lo64 >> 9)  | (value.hi64 << (64 - 9)),     (ulong)((long)value.hi64 >> 9));
                    case 10:  return new Int128((value.lo64 >> 10) | (value.hi64 << (64 - 10)),    (ulong)((long)value.hi64 >> 10));
                    case 11:  return new Int128((value.lo64 >> 11) | (value.hi64 << (64 - 11)),    (ulong)((long)value.hi64 >> 11));
                    case 12:  return new Int128((value.lo64 >> 12) | (value.hi64 << (64 - 12)),    (ulong)((long)value.hi64 >> 12));
                    case 13:  return new Int128((value.lo64 >> 13) | (value.hi64 << (64 - 13)),    (ulong)((long)value.hi64 >> 13));
                    case 14:  return new Int128((value.lo64 >> 14) | (value.hi64 << (64 - 14)),    (ulong)((long)value.hi64 >> 14));
                    case 15:  return new Int128((value.lo64 >> 15) | (value.hi64 << (64 - 15)),    (ulong)((long)value.hi64 >> 15));
                    case 16:  return new Int128((value.lo64 >> 16) | (value.hi64 << (64 - 16)),    (ulong)((long)value.hi64 >> 16));
                    case 17:  return new Int128((value.lo64 >> 17) | (value.hi64 << (64 - 17)),    (ulong)((long)value.hi64 >> 17));
                    case 18:  return new Int128((value.lo64 >> 18) | (value.hi64 << (64 - 18)),    (ulong)((long)value.hi64 >> 18));
                    case 19:  return new Int128((value.lo64 >> 19) | (value.hi64 << (64 - 19)),    (ulong)((long)value.hi64 >> 19));
                    case 20:  return new Int128((value.lo64 >> 20) | (value.hi64 << (64 - 20)),    (ulong)((long)value.hi64 >> 20));
                    case 21:  return new Int128((value.lo64 >> 21) | (value.hi64 << (64 - 21)),    (ulong)((long)value.hi64 >> 21));
                    case 22:  return new Int128((value.lo64 >> 22) | (value.hi64 << (64 - 22)),    (ulong)((long)value.hi64 >> 22));
                    case 23:  return new Int128((value.lo64 >> 23) | (value.hi64 << (64 - 23)),    (ulong)((long)value.hi64 >> 23));
                    case 24:  return new Int128((value.lo64 >> 24) | (value.hi64 << (64 - 24)),    (ulong)((long)value.hi64 >> 24));
                    case 25:  return new Int128((value.lo64 >> 25) | (value.hi64 << (64 - 25)),    (ulong)((long)value.hi64 >> 25));
                    case 26:  return new Int128((value.lo64 >> 26) | (value.hi64 << (64 - 26)),    (ulong)((long)value.hi64 >> 26));
                    case 27:  return new Int128((value.lo64 >> 27) | (value.hi64 << (64 - 27)),    (ulong)((long)value.hi64 >> 27));
                    case 28:  return new Int128((value.lo64 >> 28) | (value.hi64 << (64 - 28)),    (ulong)((long)value.hi64 >> 28));
                    case 29:  return new Int128((value.lo64 >> 29) | (value.hi64 << (64 - 29)),    (ulong)((long)value.hi64 >> 29));
                    case 30:  return new Int128((value.lo64 >> 30) | (value.hi64 << (64 - 30)),    (ulong)((long)value.hi64 >> 30));
                    case 31:  return new Int128((value.lo64 >> 31) | (value.hi64 << (64 - 31)),    (ulong)((long)value.hi64 >> 31));
                    case 32:  return new Int128((value.lo64 >> 32) | (value.hi64 << (64 - 32)),    (ulong)((long)value.hi64 >> 32));
                    case 33:  return new Int128((value.lo64 >> 33) | (value.hi64 << (64 - 33)),    (ulong)((long)value.hi64 >> 33));
                    case 34:  return new Int128((value.lo64 >> 34) | (value.hi64 << (64 - 34)),    (ulong)((long)value.hi64 >> 34));
                    case 35:  return new Int128((value.lo64 >> 35) | (value.hi64 << (64 - 35)),    (ulong)((long)value.hi64 >> 35));
                    case 36:  return new Int128((value.lo64 >> 36) | (value.hi64 << (64 - 36)),    (ulong)((long)value.hi64 >> 36));
                    case 37:  return new Int128((value.lo64 >> 37) | (value.hi64 << (64 - 37)),    (ulong)((long)value.hi64 >> 37));
                    case 38:  return new Int128((value.lo64 >> 38) | (value.hi64 << (64 - 38)),    (ulong)((long)value.hi64 >> 38));
                    case 39:  return new Int128((value.lo64 >> 39) | (value.hi64 << (64 - 39)),    (ulong)((long)value.hi64 >> 39));
                    case 40:  return new Int128((value.lo64 >> 40) | (value.hi64 << (64 - 40)),    (ulong)((long)value.hi64 >> 40));
                    case 41:  return new Int128((value.lo64 >> 41) | (value.hi64 << (64 - 41)),    (ulong)((long)value.hi64 >> 41));
                    case 42:  return new Int128((value.lo64 >> 42) | (value.hi64 << (64 - 42)),    (ulong)((long)value.hi64 >> 42));
                    case 43:  return new Int128((value.lo64 >> 43) | (value.hi64 << (64 - 43)),    (ulong)((long)value.hi64 >> 43));
                    case 44:  return new Int128((value.lo64 >> 44) | (value.hi64 << (64 - 44)),    (ulong)((long)value.hi64 >> 44));
                    case 45:  return new Int128((value.lo64 >> 45) | (value.hi64 << (64 - 45)),    (ulong)((long)value.hi64 >> 45));
                    case 46:  return new Int128((value.lo64 >> 46) | (value.hi64 << (64 - 46)),    (ulong)((long)value.hi64 >> 46));
                    case 47:  return new Int128((value.lo64 >> 47) | (value.hi64 << (64 - 47)),    (ulong)((long)value.hi64 >> 47));
                    case 48:  return new Int128((value.lo64 >> 48) | (value.hi64 << (64 - 48)),    (ulong)((long)value.hi64 >> 48));
                    case 49:  return new Int128((value.lo64 >> 49) | (value.hi64 << (64 - 49)),    (ulong)((long)value.hi64 >> 49));
                    case 50:  return new Int128((value.lo64 >> 50) | (value.hi64 << (64 - 50)),    (ulong)((long)value.hi64 >> 50));
                    case 51:  return new Int128((value.lo64 >> 51) | (value.hi64 << (64 - 51)),    (ulong)((long)value.hi64 >> 51));
                    case 52:  return new Int128((value.lo64 >> 52) | (value.hi64 << (64 - 52)),    (ulong)((long)value.hi64 >> 52));
                    case 53:  return new Int128((value.lo64 >> 53) | (value.hi64 << (64 - 53)),    (ulong)((long)value.hi64 >> 53));
                    case 54:  return new Int128((value.lo64 >> 54) | (value.hi64 << (64 - 54)),    (ulong)((long)value.hi64 >> 54));
                    case 55:  return new Int128((value.lo64 >> 55) | (value.hi64 << (64 - 55)),    (ulong)((long)value.hi64 >> 55));
                    case 56:  return new Int128((value.lo64 >> 56) | (value.hi64 << (64 - 56)),    (ulong)((long)value.hi64 >> 56));
                    case 57:  return new Int128((value.lo64 >> 57) | (value.hi64 << (64 - 57)),    (ulong)((long)value.hi64 >> 57));
                    case 58:  return new Int128((value.lo64 >> 58) | (value.hi64 << (64 - 58)),    (ulong)((long)value.hi64 >> 58));
                    case 59:  return new Int128((value.lo64 >> 59) | (value.hi64 << (64 - 59)),    (ulong)((long)value.hi64 >> 59));
                    case 60:  return new Int128((value.lo64 >> 60) | (value.hi64 << (64 - 60)),    (ulong)((long)value.hi64 >> 60));
                    case 61:  return new Int128((value.lo64 >> 61) | (value.hi64 << (64 - 61)),    (ulong)((long)value.hi64 >> 61));
                    case 62:  return new Int128((value.lo64 >> 62) | (value.hi64 << (64 - 62)),    (ulong)((long)value.hi64 >> 62));
                    case 63:  return new Int128((value.lo64 >> 63) | (value.hi64 << (64 - 63)),    (ulong)((long)value.hi64 >> 63));
                    case 64:  return new Int128((long)value.hi64,           (long)value.hi64 >> 63);
                    case 65:  return new Int128((long)value.hi64 >> 1,      (long)value.hi64 >> 63);
                    case 66:  return new Int128((long)value.hi64 >> 2,      (long)value.hi64 >> 63);
                    case 67:  return new Int128((long)value.hi64 >> 3,      (long)value.hi64 >> 63);
                    case 68:  return new Int128((long)value.hi64 >> 4,      (long)value.hi64 >> 63);
                    case 69:  return new Int128((long)value.hi64 >> 5,      (long)value.hi64 >> 63);
                    case 70:  return new Int128((long)value.hi64 >> 6,      (long)value.hi64 >> 63);
                    case 71:  return new Int128((long)value.hi64 >> 7,      (long)value.hi64 >> 63);
                    case 72:  return new Int128((long)value.hi64 >> 8,      (long)value.hi64 >> 63);
                    case 73:  return new Int128((long)value.hi64 >> 9,      (long)value.hi64 >> 63);
                    case 74:  return new Int128((long)value.hi64 >> 10,     (long)value.hi64 >> 63);
                    case 75:  return new Int128((long)value.hi64 >> 11,     (long)value.hi64 >> 63);
                    case 76:  return new Int128((long)value.hi64 >> 12,     (long)value.hi64 >> 63);
                    case 77:  return new Int128((long)value.hi64 >> 13,     (long)value.hi64 >> 63);
                    case 78:  return new Int128((long)value.hi64 >> 14,     (long)value.hi64 >> 63);
                    case 79:  return new Int128((long)value.hi64 >> 15,     (long)value.hi64 >> 63);
                    case 80:  return new Int128((long)value.hi64 >> 16,     (long)value.hi64 >> 63);
                    case 81:  return new Int128((long)value.hi64 >> 17,     (long)value.hi64 >> 63);
                    case 82:  return new Int128((long)value.hi64 >> 18,     (long)value.hi64 >> 63);
                    case 83:  return new Int128((long)value.hi64 >> 19,     (long)value.hi64 >> 63);
                    case 84:  return new Int128((long)value.hi64 >> 20,     (long)value.hi64 >> 63);
                    case 85:  return new Int128((long)value.hi64 >> 21,     (long)value.hi64 >> 63);
                    case 86:  return new Int128((long)value.hi64 >> 22,     (long)value.hi64 >> 63);
                    case 87:  return new Int128((long)value.hi64 >> 23,     (long)value.hi64 >> 63);
                    case 88:  return new Int128((long)value.hi64 >> 24,     (long)value.hi64 >> 63);
                    case 89:  return new Int128((long)value.hi64 >> 25,     (long)value.hi64 >> 63);
                    case 90:  return new Int128((long)value.hi64 >> 26,     (long)value.hi64 >> 63);
                    case 91:  return new Int128((long)value.hi64 >> 27,     (long)value.hi64 >> 63);
                    case 92:  return new Int128((long)value.hi64 >> 28,     (long)value.hi64 >> 63);
                    case 93:  return new Int128((long)value.hi64 >> 29,     (long)value.hi64 >> 63);
                    case 94:  return new Int128((long)value.hi64 >> 30,     (long)value.hi64 >> 63);
                    case 95:  return new Int128((long)value.hi64 >> 31,     (long)value.hi64 >> 63);
                    case 96:  return new Int128((long)value.hi64 >> 32,     (long)value.hi64 >> 63);
                    case 97:  return new Int128((long)value.hi64 >> 33,     (long)value.hi64 >> 63);
                    case 98:  return new Int128((long)value.hi64 >> 34,     (long)value.hi64 >> 63);
                    case 99:  return new Int128((long)value.hi64 >> 35,     (long)value.hi64 >> 63);
                    case 100: return new Int128((long)value.hi64 >> 36,     (long)value.hi64 >> 63);
                    case 101: return new Int128((long)value.hi64 >> 37,     (long)value.hi64 >> 63);
                    case 102: return new Int128((long)value.hi64 >> 38,     (long)value.hi64 >> 63);
                    case 103: return new Int128((long)value.hi64 >> 39,     (long)value.hi64 >> 63);
                    case 104: return new Int128((long)value.hi64 >> 40,     (long)value.hi64 >> 63);
                    case 105: return new Int128((long)value.hi64 >> 41,     (long)value.hi64 >> 63);
                    case 106: return new Int128((long)value.hi64 >> 42,     (long)value.hi64 >> 63);
                    case 107: return new Int128((long)value.hi64 >> 43,     (long)value.hi64 >> 63);
                    case 108: return new Int128((long)value.hi64 >> 44,     (long)value.hi64 >> 63);
                    case 109: return new Int128((long)value.hi64 >> 45,     (long)value.hi64 >> 63);
                    case 110: return new Int128((long)value.hi64 >> 46,     (long)value.hi64 >> 63);
                    case 111: return new Int128((long)value.hi64 >> 47,     (long)value.hi64 >> 63);
                    case 112: return new Int128((long)value.hi64 >> 48,     (long)value.hi64 >> 63);
                    case 113: return new Int128((long)value.hi64 >> 49,     (long)value.hi64 >> 63);
                    case 114: return new Int128((long)value.hi64 >> 50,     (long)value.hi64 >> 63);
                    case 115: return new Int128((long)value.hi64 >> 51,     (long)value.hi64 >> 63);
                    case 116: return new Int128((long)value.hi64 >> 52,     (long)value.hi64 >> 63);
                    case 117: return new Int128((long)value.hi64 >> 53,     (long)value.hi64 >> 63);
                    case 118: return new Int128((long)value.hi64 >> 54,     (long)value.hi64 >> 63);
                    case 119: return new Int128((long)value.hi64 >> 55,     (long)value.hi64 >> 63);
                    case 120: return new Int128((long)value.hi64 >> 56,     (long)value.hi64 >> 63);
                    case 121: return new Int128((long)value.hi64 >> 57,     (long)value.hi64 >> 63);
                    case 122: return new Int128((long)value.hi64 >> 58,     (long)value.hi64 >> 63);
                    case 123: return new Int128((long)value.hi64 >> 59,     (long)value.hi64 >> 63);
                    case 124: return new Int128((long)value.hi64 >> 60,     (long)value.hi64 >> 63);
                    case 125: return new Int128((long)value.hi64 >> 61,     (long)value.hi64 >> 63);
                    case 126: return new Int128((long)value.hi64 >> 62,     (long)value.hi64 >> 63);
                    case 127: return new Int128((long)value.hi64 >> 63,     (long)value.hi64 >> 63);
    
                    default:  return value;
                }
            }
        }
    }
}