using System.Runtime.CompilerServices;
using Unity.Burst.Intrinsics;

using static Unity.Burst.Intrinsics.X86;

namespace MaxMath.Intrinsics
{
    unsafe public static partial class Xse
    {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static v128 ternarylogic_si128(v128 a, v128 b, v128 c, TernaryOperation code)
        {
			if (Architecture.IsSIMDSupported)
			{
				return ternarylogic_si128(a, b, c, (byte)code);
			}
			else throw new IllegalInstructionException();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static v128 ternarylogic_si128(v128 a, v128 b, v128 c, byte code)
        {
			if (Architecture.IsSIMDSupported)
            {
				switch (code)
				{
					case 0x00: return setzero_si128();
					case 0x01: return nor_si128(a, or_si128(b, c));
					case 0x02: return andnot_si128(or_si128(b, a), c);
					case 0x03: return nor_si128(b, a);
					case 0x04: return andnot_si128(or_si128(a, c), b);
					case 0x05: return nor_si128(c, a);
					case 0x06: return andnot_si128(a, xor_si128(b, c));
					case 0x07: return nor_si128(a, and_si128(b, c));
					case 0x08: return and_si128(andnot_si128(a, b), c);
					case 0x09: return nor_si128(a, xor_si128(b, c));
					case 0x0A: return andnot_si128(a, c);
					case 0x0B: return andnot_si128(a, ornot_si128(b, c));
					case 0x0C: return andnot_si128(a, b);
					case 0x0D: return andnot_si128(a, ornot_si128(c, b));
					case 0x0E: return andnot_si128(a, or_si128(b, c));
					case 0x0F: return not_si128(a);
					case 0x10: return andnot_si128(or_si128(b, c), a);
					case 0x11: return nor_si128(c, b);
					case 0x12: return andnot_si128(b, xor_si128(a, c));
					case 0x13: return nor_si128(b, and_si128(a, c));
					case 0x14: return andnot_si128(c, xor_si128(a, b));
					case 0x15: return nor_si128(c, and_si128(b, a));
					case 0x16: return or_si128(andnot_si128(or_si128(b, c), a), andnot_si128(a, xor_si128(b, c)));
					case 0x17: return ornot_si128(or_si128(b, c), andnot_si128(a, xor_si128(b, c)));
					case 0x18: return and_si128(xor_si128(a, b), xor_si128(a, c));
					case 0x19: return andnot_si128(and_si128(a, b), xnor_si128(b, c));
					case 0x1A: return andnot_si128(and_si128(a, b), xor_si128(a, c));
					case 0x1B: return or_si128(andnot_si128(a, c), andnot_si128(c, not_si128(b)));
					case 0x1C: return andnot_si128(and_si128(a, c), xor_si128(a, b));
					case 0x1D: return or_si128(andnot_si128(a, b), andnot_si128(b, not_si128(c)));
					case 0x1E: return xor_si128(a, or_si128(b, c));
					case 0x1F: return nand_si128(a, or_si128(b, c));
					case 0x20: return and_si128(andnot_si128(b, a), c);
					case 0x21: return nor_si128(b, xor_si128(a, c));
					case 0x22: return andnot_si128(b, c);
					case 0x23: return andnot_si128(b, ornot_si128(a, c));
					case 0x24: return and_si128(xor_si128(a, b), xor_si128(b, c));
					case 0x25: return andnot_si128(and_si128(a, b), xnor_si128(a, c));
					case 0x26: return andnot_si128(and_si128(a, b), xor_si128(b, c));
					case 0x27: return or_si128(andnot_si128(b, c), andnot_si128(c, not_si128(a)));
					case 0x28: return and_si128(c, xor_si128(b, a));
					case 0x29: return or_si128(and_si128(c, xor_si128(b, a)), andnot_si128(c, nor_si128(b, a)));
					case 0x2A: return andnot_si128(and_si128(b, a), c);
					case 0x2B: return or_si128(andnot_si128(and_si128(b, a), c), andnot_si128(c, nor_si128(b, a)));
					case 0x2C: return and_si128(or_si128(b, c), xor_si128(a, b));
					case 0x2D: return xor_si128(a, ornot_si128(c, b));
					case 0x2E: return xor_si128(or_si128(b, c), and_si128(a, b));
					case 0x2F: return ornot_si128(a, andnot_si128(b, c));
					case 0x30: return andnot_si128(b, a);
					case 0x31: return andnot_si128(b, ornot_si128(c, a));
					case 0x32: return andnot_si128(b, or_si128(a, c));
					case 0x33: return not_si128(b);
					case 0x34: return andnot_si128(and_si128(b, c), xor_si128(a, b));
					case 0x35: return or_si128(andnot_si128(b, a), andnot_si128(a, not_si128(c)));
					case 0x36: return xor_si128(b, or_si128(a, c));
					case 0x37: return nand_si128(b, or_si128(a, c));
					case 0x38: return and_si128(or_si128(a, c), xor_si128(a, b));
					case 0x39: return or_si128(b, ornot_si128(c, a));
					case 0x3A: return or_si128(andnot_si128(b, a), andnot_si128(a, c));
					case 0x3B: return ornot_si128(b, andnot_si128(a, c));
					case 0x3C: return xor_si128(b, a);
					case 0x3D: return ornot_si128(or_si128(a, c), xor_si128(a, b));
					case 0x3E: return or_si128(andnot_si128(a, c), xor_si128(a, b));
					case 0x3F: return nand_si128(b, a);
					case 0x40: return and_si128(andnot_si128(c, a), b);
					case 0x41: return nor_si128(c, xor_si128(b, a));
					case 0x42: return and_si128(xor_si128(a, c), xor_si128(b, c));
					case 0x43: return andnot_si128(and_si128(a, c), xnor_si128(a, b));
					case 0x44: return andnot_si128(c, b);
					case 0x45: return andnot_si128(c, ornot_si128(a, b));
					case 0x46: return andnot_si128(and_si128(a, c), xor_si128(b, c));
					case 0x47: return or_si128(andnot_si128(c, b), andnot_si128(b, not_si128(a)));
					case 0x48: return and_si128(b, xor_si128(a, c));
					case 0x49: return or_si128(and_si128(b, xor_si128(a, c)), andnot_si128(b, nor_si128(a, c)));
					case 0x4A: return and_si128(or_si128(b, c), xor_si128(a, c));
					case 0x4B: return xor_si128(a, ornot_si128(b, c));
					case 0x4C: return andnot_si128(and_si128(a, c), b);
					case 0x4D: return or_si128(andnot_si128(and_si128(a, c), b), andnot_si128(b, nor_si128(a, c)));
					case 0x4E: return or_si128(andnot_si128(a, c), andnot_si128(c, b));
					case 0x4F: return ornot_si128(a, andnot_si128(c, b));
					case 0x50: return andnot_si128(c, a);
					case 0x51: return andnot_si128(c, ornot_si128(b, a));
					case 0x52: return andnot_si128(and_si128(b, c), xor_si128(a, c));
					case 0x53: return or_si128(andnot_si128(c, a), andnot_si128(a, not_si128(b)));
					case 0x54: return andnot_si128(c, or_si128(a, b));
					case 0x55: return not_si128(c);
					case 0x56: return xor_si128(c, or_si128(b, a));
					case 0x57: return nand_si128(c, or_si128(b, a));
					case 0x58: return and_si128(or_si128(a, b), xor_si128(a, c));
					case 0x59: return xor_si128(c, ornot_si128(b, a));
					case 0x5A: return xor_si128(c, a);
					case 0x5B: return ornot_si128(or_si128(a, b), xor_si128(a, c));
					case 0x5C: return or_si128(andnot_si128(c, a), andnot_si128(a, b));
					case 0x5D: return ornot_si128(c, andnot_si128(a, b));
					case 0x5E: return or_si128(andnot_si128(c, b), xor_si128(a, c));
					case 0x5F: return nand_si128(c, a);
					case 0x60: return and_si128(a, xor_si128(b, c));
					case 0x61: return or_si128(and_si128(a, xor_si128(b, c)), andnot_si128(a, nor_si128(b, c)));
					case 0x62: return and_si128(or_si128(a, c), xor_si128(b, c));
					case 0x63: return xor_si128(b, ornot_si128(a, c));
					case 0x64: return and_si128(or_si128(a, b), xor_si128(b, c));
					case 0x65: return xor_si128(c, ornot_si128(a, b));
					case 0x66: return xor_si128(c, b);
					case 0x67: return ornot_si128(or_si128(a, b), xor_si128(b, c));
					case 0x68: return or_si128(and_si128(a, xor_si128(b, c)), andnot_si128(a, and_si128(b, c)));
					case 0x69: return xnor_si128(a, xor_si128(b, c));
					case 0x6A: return xor_si128(c, and_si128(b, a));
					case 0x6B: return or_si128(andnot_si128(a, c), xnor_si128(a, xor_si128(b, c)));
					case 0x6C: return xor_si128(b, and_si128(a, c));
					case 0x6D: return or_si128(andnot_si128(a, b), xnor_si128(a, xor_si128(b, c)));
					case 0x6E: return or_si128(andnot_si128(a, b), xor_si128(b, c));
					case 0x6F: return ornot_si128(a, xor_si128(b, c));
					case 0x70: return andnot_si128(and_si128(b, c), a);
					case 0x71: return ornot_si128(or_si128(b, c), and_si128(a, xor_si128(b, c)));
					case 0x72: return or_si128(andnot_si128(b, c), andnot_si128(c, a));
					case 0x73: return ornot_si128(b, andnot_si128(c, a));
					case 0x74: return or_si128(andnot_si128(c, b), andnot_si128(b, a));
					case 0x75: return ornot_si128(c, andnot_si128(b, a));
					case 0x76: return or_si128(andnot_si128(b, a), xor_si128(b, c));
					case 0x77: return nand_si128(c, b);
					case 0x78: return xor_si128(a, and_si128(b, c));
					case 0x79: return or_si128(andnot_si128(b, a), xnor_si128(b, xor_si128(a, c)));
					case 0x7A: return or_si128(andnot_si128(b, a), xor_si128(a, c));
					case 0x7B: return ornot_si128(b, xor_si128(a, c));
					case 0x7C: return or_si128(andnot_si128(c, a), xor_si128(a, b));
					case 0x7D: return ornot_si128(c, xor_si128(a, b));
					case 0x7E: return or_si128(xor_si128(a, b), xor_si128(a, c));
					case 0x7F: return nand_si128(and_si128(a, b), c);
					case 0x80: return and_si128(a, and_si128(b, c));
					case 0x81: return andnot_si128(xor_si128(a, c), xnor_si128(a, b));
					case 0x82: return andnot_si128(xor_si128(b, a), c);
					case 0x83: return andnot_si128(xor_si128(a, b), ornot_si128(a, c));
					case 0x84: return andnot_si128(xor_si128(a, c), b);
					case 0x85: return andnot_si128(xor_si128(a, c), ornot_si128(c, b));
					case 0x86: return and_si128(or_si128(b, c), xor_si128(c, xor_si128(a, b)));
					case 0x87: return xnor_si128(a, and_si128(b, c));
					case 0x88: return and_si128(c, b);
					case 0x89: return andnot_si128(xor_si128(b, c), ornot_si128(a, b));
					case 0x8A: return andnot_si128(andnot_si128(b, a), c);
					case 0x8B: return or_si128(and_si128(b, c), andnot_si128(b, not_si128(a)));
					case 0x8C: return andnot_si128(andnot_si128(c, a), b);
					case 0x8D: return or_si128(and_si128(c, b), andnot_si128(c, not_si128(a)));
					case 0x8E: return or_si128(and_si128(b, c), andnot_si128(a, xor_si128(b, c)));
					case 0x8F: return ornot_si128(a, and_si128(b, c));
					case 0x90: return andnot_si128(xor_si128(b, c), a);
					case 0x91: return andnot_si128(xor_si128(b, c), ornot_si128(b, a));
					case 0x92: return and_si128(or_si128(a, c), xor_si128(c, xor_si128(a, b)));
					case 0x93: return xnor_si128(b, and_si128(a, c));
					case 0x94: return and_si128(or_si128(a, b), xor_si128(b, xor_si128(a, c)));
					case 0x95: return xnor_si128(c, and_si128(b, a));
					case 0x96: return xor_si128(a, xor_si128(b, c));
					case 0x97: return or_si128(andnot_si128(xor_si128(b, c), a), andnot_si128(a, nand_si128(b, c)));
					case 0x98: return andnot_si128(xor_si128(b, c), or_si128(a, b));
					case 0x99: return xnor_si128(c, b);
					case 0x9A: return xor_si128(andnot_si128(b, a), c);
					case 0x9B: return or_si128(andnot_si128(a, c), xnor_si128(b, c));
					case 0x9C: return xor_si128(andnot_si128(c, a), b);
					case 0x9D: return or_si128(andnot_si128(a, b), xnor_si128(b, c));
					case 0x9E: return or_si128(and_si128(b, c), xor_si128(c, xor_si128(a, b)));
					case 0x9F: return nand_si128(a, xor_si128(b, c));
					case 0xA0: return and_si128(c, a);
					case 0xA1: return andnot_si128(xor_si128(a, c), ornot_si128(b, a));
					case 0xA2: return andnot_si128(andnot_si128(a, b), c);
					case 0xA3: return or_si128(and_si128(a, c), andnot_si128(a, not_si128(b)));
					case 0xA4: return andnot_si128(xor_si128(a, c), or_si128(a, b));
					case 0xA5: return xnor_si128(c, a);
					case 0xA6: return xor_si128(andnot_si128(a, b), c);
					case 0xA7: return or_si128(andnot_si128(b, c), xnor_si128(a, c));
					case 0xA8: return and_si128(c, or_si128(a, b));
					case 0xA9: return xnor_si128(c, or_si128(b, a));
					case 0xAA: return c;
					case 0xAB: return ornot_si128(or_si128(b, a), c);
					case 0xAC: return or_si128(and_si128(a, c), andnot_si128(a, b));
					case 0xAD: return or_si128(and_si128(b, c), xnor_si128(a, c));
					case 0xAE: return or_si128(andnot_si128(a, b), c);
					case 0xAF: return ornot_si128(a, c);
					case 0xB0: return andnot_si128(andnot_si128(c, b), a);
					case 0xB1: return or_si128(and_si128(c, a), andnot_si128(c, not_si128(b)));
					case 0xB2: return or_si128(and_si128(b, and_si128(a, c)), andnot_si128(b, or_si128(a, c)));
					case 0xB3: return ornot_si128(b, and_si128(a, c));
					case 0xB4: return xor_si128(andnot_si128(c, b), a);
					case 0xB5: return or_si128(andnot_si128(b, a), xnor_si128(a, c));
					case 0xB6: return or_si128(and_si128(a, c), xor_si128(c, xor_si128(a, b)));
					case 0xB7: return nand_si128(b, xor_si128(a, c));
					case 0xB8: return or_si128(and_si128(b, c), andnot_si128(b, a));
					case 0xB9: return or_si128(and_si128(a, c), xnor_si128(b, c));
					case 0xBA: return or_si128(andnot_si128(b, a), c);
					case 0xBB: return ornot_si128(b, c);
					case 0xBC: return or_si128(and_si128(a, c), xor_si128(a, b));
					case 0xBD: return or_si128(xor_si128(a, b), xnor_si128(a, c));
					case 0xBE: return or_si128(c, xor_si128(b, a));
					case 0xBF: return ornot_si128(and_si128(b, a), c);
					case 0xC0: return and_si128(b, a);
					case 0xC1: return andnot_si128(xor_si128(a, b), ornot_si128(c, a));
					case 0xC2: return andnot_si128(xor_si128(a, b), or_si128(a, c));
					case 0xC3: return xnor_si128(b, a);
					case 0xC4: return andnot_si128(andnot_si128(a, c), b);
					case 0xC5: return or_si128(and_si128(a, b), andnot_si128(a, not_si128(c)));
					case 0xC6: return xor_si128(andnot_si128(a, c), b);
					case 0xC7: return or_si128(andnot_si128(c, b), xnor_si128(a, b));
					case 0xC8: return and_si128(b, or_si128(a, c));
					case 0xC9: return xnor_si128(b, or_si128(a, c));
					case 0xCA: return or_si128(and_si128(a, b), andnot_si128(a, c));
					case 0xCB: return or_si128(and_si128(b, c), xnor_si128(a, b));
					case 0xCC: return b;
					case 0xCD: return ornot_si128(or_si128(a, c), b);
					case 0xCE: return or_si128(andnot_si128(a, c), b);
					case 0xCF: return ornot_si128(a, b);
					case 0xD0: return andnot_si128(andnot_si128(b, c), a);
					case 0xD1: return ornot_si128(or_si128(b, c), and_si128(a, b));
					case 0xD2: return xor_si128(andnot_si128(b, c), a);
					case 0xD3: return or_si128(andnot_si128(c, a), xnor_si128(a, b));
					case 0xD4: return or_si128(andnot_si128(c, b), andnot_si128(xor_si128(b, c), a));
					case 0xD5: return ornot_si128(c, and_si128(a, b));
					case 0xD6: return or_si128(and_si128(a, b), xor_si128(b, xor_si128(a, c)));
					case 0xD7: return nand_si128(c, xor_si128(b, a));
					case 0xD8: return or_si128(and_si128(c, b), andnot_si128(c, a));
					case 0xD9: return or_si128(and_si128(a, b), xnor_si128(b, c));
					case 0xDA: return or_si128(and_si128(a, b), xor_si128(a, c));
					case 0xDB: return or_si128(xor_si128(a, c), xnor_si128(a, b));
					case 0xDC: return or_si128(andnot_si128(c, a), b);
					case 0xDD: return ornot_si128(c, b);
					case 0xDE: return or_si128(b, xor_si128(a, c));
					case 0xDF: return ornot_si128(and_si128(a, c), b);
					case 0xE0: return and_si128(a, or_si128(b, c));
					case 0xE1: return xnor_si128(a, or_si128(b, c));
					case 0xE2: return or_si128(and_si128(b, a), andnot_si128(b, c));
					case 0xE3: return or_si128(and_si128(a, c), xnor_si128(a, b));
					case 0xE4: return or_si128(and_si128(c, a), andnot_si128(c, b));
					case 0xE5: return or_si128(and_si128(a, b), xnor_si128(a, c));
					case 0xE6: return or_si128(and_si128(a, b), xor_si128(b, c));
					case 0xE7: return or_si128(xor_si128(b, c), xnor_si128(a, b));
					case 0xE8: return or_si128(and_si128(b, c), and_si128(a, xor_si128(b, c)));
					case 0xE9: return or_si128(and_si128(a, b), xor_si128(b, xnor_si128(a, c)));
					case 0xEA: return or_si128(c, and_si128(b, a));
					case 0xEB: return ornot_si128(xor_si128(b, a), c);
					case 0xEC: return or_si128(b, and_si128(a, c));
					case 0xED: return ornot_si128(xor_si128(a, c), b);
					case 0xEE: return or_si128(c, b);
					case 0xEF: return or_si128(b, ornot_si128(a, c));
					case 0xF0: return a;
					case 0xF1: return ornot_si128(or_si128(b, c), a);
					case 0xF2: return or_si128(andnot_si128(b, c), a);
					case 0xF3: return ornot_si128(b, a);
					case 0xF4: return or_si128(andnot_si128(c, b), a);
					case 0xF5: return ornot_si128(c, a);
					case 0xF6: return or_si128(a, xor_si128(b, c));
					case 0xF7: return ornot_si128(and_si128(b, c), a);
					case 0xF8: return or_si128(a, and_si128(b, c));
					case 0xF9: return ornot_si128(xor_si128(b, c), a);
					case 0xFA: return or_si128(c, a);
					case 0xFB: return or_si128(a, ornot_si128(b, c));
					case 0xFC: return or_si128(b, a);
					case 0xFD: return or_si128(a, ornot_si128(c, b));
					case 0xFE: return or_si128(a, or_si128(b, c));
					case 0xFF: return setall_si128();
				}
			}
			else throw new IllegalInstructionException();
        }


        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static v256 mm256_ternarylogic_si256(v256 a, v256 b, v256 c, TernaryOperation code)
        {
			if (Avx.IsAvxSupported)
            {
				return mm256_ternarylogic_si256(a, b, c, (byte)code);
			}
			else throw new IllegalInstructionException();
		}

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static v256 mm256_ternarylogic_si256(v256 a, v256 b, v256 c, byte code)
        {
			if (Avx.IsAvxSupported)
            {
				switch (code)
				{
					case 0x00: return Avx.mm256_setzero_ps();
					case 0x01: return mm256_nor_si256(a, Avx.mm256_or_ps(b, c));
					case 0x02: return Avx.mm256_andnot_ps(Avx.mm256_or_ps(b, a), c);
					case 0x03: return mm256_nor_si256(b, a);
					case 0x04: return Avx.mm256_andnot_ps(Avx.mm256_or_ps(a, c), b);
					case 0x05: return mm256_nor_si256(c, a);
					case 0x06: return Avx.mm256_andnot_ps(a, Avx.mm256_xor_ps(b, c));
					case 0x07: return mm256_nor_si256(a, Avx.mm256_and_ps(b, c));
					case 0x08: return Avx.mm256_and_ps(Avx.mm256_andnot_ps(a, b), c);
					case 0x09: return mm256_nor_si256(a, Avx.mm256_xor_ps(b, c));
					case 0x0A: return Avx.mm256_andnot_ps(a, c);
					case 0x0B: return Avx.mm256_andnot_ps(a, mm256_ornot_si256(b, c));
					case 0x0C: return Avx.mm256_andnot_ps(a, b);
					case 0x0D: return Avx.mm256_andnot_ps(a, mm256_ornot_si256(c, b));
					case 0x0E: return Avx.mm256_andnot_ps(a, Avx.mm256_or_ps(b, c));
					case 0x0F: return mm256_not_si256(a);
					case 0x10: return Avx.mm256_andnot_ps(Avx.mm256_or_ps(b, c), a);
					case 0x11: return mm256_nor_si256(c, b);
					case 0x12: return Avx.mm256_andnot_ps(b, Avx.mm256_xor_ps(a, c));
					case 0x13: return mm256_nor_si256(b, Avx.mm256_and_ps(a, c));
					case 0x14: return Avx.mm256_andnot_ps(c, Avx.mm256_xor_ps(a, b));
					case 0x15: return mm256_nor_si256(c, Avx.mm256_and_ps(b, a));
					case 0x16: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(Avx.mm256_or_ps(b, c), a), Avx.mm256_andnot_ps(a, Avx.mm256_xor_ps(b, c)));
					case 0x17: return mm256_ornot_si256(Avx.mm256_or_ps(b, c), Avx.mm256_andnot_ps(a, Avx.mm256_xor_ps(b, c)));
					case 0x18: return Avx.mm256_and_ps(Avx.mm256_xor_ps(a, b), Avx.mm256_xor_ps(a, c));
					case 0x19: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, b), mm256_xnor_si256(b, c));
					case 0x1A: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, b), Avx.mm256_xor_ps(a, c));
					case 0x1B: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, c), Avx.mm256_andnot_ps(c, mm256_not_si256(b)));
					case 0x1C: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, c), Avx.mm256_xor_ps(a, b));
					case 0x1D: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, b), Avx.mm256_andnot_ps(b, mm256_not_si256(c)));
					case 0x1E: return Avx.mm256_xor_ps(a, Avx.mm256_or_ps(b, c));
					case 0x1F: return mm256_nand_si256(a, Avx.mm256_or_ps(b, c));
					case 0x20: return Avx.mm256_and_ps(Avx.mm256_andnot_ps(b, a), c);
					case 0x21: return mm256_nor_si256(b, Avx.mm256_xor_ps(a, c));
					case 0x22: return Avx.mm256_andnot_ps(b, c);
					case 0x23: return Avx.mm256_andnot_ps(b, mm256_ornot_si256(a, c));
					case 0x24: return Avx.mm256_and_ps(Avx.mm256_xor_ps(a, b), Avx.mm256_xor_ps(b, c));
					case 0x25: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, b), mm256_xnor_si256(a, c));
					case 0x26: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, b), Avx.mm256_xor_ps(b, c));
					case 0x27: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, c), Avx.mm256_andnot_ps(c, mm256_not_si256(a)));
					case 0x28: return Avx.mm256_and_ps(c, Avx.mm256_xor_ps(b, a));
					case 0x29: return Avx.mm256_or_ps(Avx.mm256_and_ps(c, Avx.mm256_xor_ps(b, a)), Avx.mm256_andnot_ps(c, mm256_nor_si256(b, a)));
					case 0x2A: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(b, a), c);
					case 0x2B: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(Avx.mm256_and_ps(b, a), c), Avx.mm256_andnot_ps(c, mm256_nor_si256(b, a)));
					case 0x2C: return Avx.mm256_and_ps(Avx.mm256_or_ps(b, c), Avx.mm256_xor_ps(a, b));
					case 0x2D: return Avx.mm256_xor_ps(a, mm256_ornot_si256(c, b));
					case 0x2E: return Avx.mm256_xor_ps(Avx.mm256_or_ps(b, c), Avx.mm256_and_ps(a, b));
					case 0x2F: return mm256_ornot_si256(a, Avx.mm256_andnot_ps(b, c));
					case 0x30: return Avx.mm256_andnot_ps(b, a);
					case 0x31: return Avx.mm256_andnot_ps(b, mm256_ornot_si256(c, a));
					case 0x32: return Avx.mm256_andnot_ps(b, Avx.mm256_or_ps(a, c));
					case 0x33: return mm256_not_si256(b);
					case 0x34: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(b, c), Avx.mm256_xor_ps(a, b));
					case 0x35: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), Avx.mm256_andnot_ps(a, mm256_not_si256(c)));
					case 0x36: return Avx.mm256_xor_ps(b, Avx.mm256_or_ps(a, c));
					case 0x37: return mm256_nand_si256(b, Avx.mm256_or_ps(a, c));
					case 0x38: return Avx.mm256_and_ps(Avx.mm256_or_ps(a, c), Avx.mm256_xor_ps(a, b));
					case 0x39: return Avx.mm256_or_ps(b, mm256_ornot_si256(c, a));
					case 0x3A: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), Avx.mm256_andnot_ps(a, c));
					case 0x3B: return mm256_ornot_si256(b, Avx.mm256_andnot_ps(a, c));
					case 0x3C: return Avx.mm256_xor_ps(b, a);
					case 0x3D: return mm256_ornot_si256(Avx.mm256_or_ps(a, c), Avx.mm256_xor_ps(a, b));
					case 0x3E: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, c), Avx.mm256_xor_ps(a, b));
					case 0x3F: return mm256_nand_si256(b, a);
					case 0x40: return Avx.mm256_and_ps(Avx.mm256_andnot_ps(c, a), b);
					case 0x41: return mm256_nor_si256(c, Avx.mm256_xor_ps(b, a));
					case 0x42: return Avx.mm256_and_ps(Avx.mm256_xor_ps(a, c), Avx.mm256_xor_ps(b, c));
					case 0x43: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, c), mm256_xnor_si256(a, b));
					case 0x44: return Avx.mm256_andnot_ps(c, b);
					case 0x45: return Avx.mm256_andnot_ps(c, mm256_ornot_si256(a, b));
					case 0x46: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, c), Avx.mm256_xor_ps(b, c));
					case 0x47: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, b), Avx.mm256_andnot_ps(b, mm256_not_si256(a)));
					case 0x48: return Avx.mm256_and_ps(b, Avx.mm256_xor_ps(a, c));
					case 0x49: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, Avx.mm256_xor_ps(a, c)), Avx.mm256_andnot_ps(b, mm256_nor_si256(a, c)));
					case 0x4A: return Avx.mm256_and_ps(Avx.mm256_or_ps(b, c), Avx.mm256_xor_ps(a, c));
					case 0x4B: return Avx.mm256_xor_ps(a, mm256_ornot_si256(b, c));
					case 0x4C: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, c), b);
					case 0x4D: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(Avx.mm256_and_ps(a, c), b), Avx.mm256_andnot_ps(b, mm256_nor_si256(a, c)));
					case 0x4E: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, c), Avx.mm256_andnot_ps(c, b));
					case 0x4F: return mm256_ornot_si256(a, Avx.mm256_andnot_ps(c, b));
					case 0x50: return Avx.mm256_andnot_ps(c, a);
					case 0x51: return Avx.mm256_andnot_ps(c, mm256_ornot_si256(b, a));
					case 0x52: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(b, c), Avx.mm256_xor_ps(a, c));
					case 0x53: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, a), Avx.mm256_andnot_ps(a, mm256_not_si256(b)));
					case 0x54: return Avx.mm256_andnot_ps(c, Avx.mm256_or_ps(a, b));
					case 0x55: return mm256_not_si256(c);
					case 0x56: return Avx.mm256_xor_ps(c, Avx.mm256_or_ps(b, a));
					case 0x57: return mm256_nand_si256(c, Avx.mm256_or_ps(b, a));
					case 0x58: return Avx.mm256_and_ps(Avx.mm256_or_ps(a, b), Avx.mm256_xor_ps(a, c));
					case 0x59: return Avx.mm256_xor_ps(c, mm256_ornot_si256(b, a));
					case 0x5A: return Avx.mm256_xor_ps(c, a);
					case 0x5B: return mm256_ornot_si256(Avx.mm256_or_ps(a, b), Avx.mm256_xor_ps(a, c));
					case 0x5C: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, a), Avx.mm256_andnot_ps(a, b));
					case 0x5D: return mm256_ornot_si256(c, Avx.mm256_andnot_ps(a, b));
					case 0x5E: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, b), Avx.mm256_xor_ps(a, c));
					case 0x5F: return mm256_nand_si256(c, a);
					case 0x60: return Avx.mm256_and_ps(a, Avx.mm256_xor_ps(b, c));
					case 0x61: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, Avx.mm256_xor_ps(b, c)), Avx.mm256_andnot_ps(a, mm256_nor_si256(b, c)));
					case 0x62: return Avx.mm256_and_ps(Avx.mm256_or_ps(a, c), Avx.mm256_xor_ps(b, c));
					case 0x63: return Avx.mm256_xor_ps(b, mm256_ornot_si256(a, c));
					case 0x64: return Avx.mm256_and_ps(Avx.mm256_or_ps(a, b), Avx.mm256_xor_ps(b, c));
					case 0x65: return Avx.mm256_xor_ps(c, mm256_ornot_si256(a, b));
					case 0x66: return Avx.mm256_xor_ps(c, b);
					case 0x67: return mm256_ornot_si256(Avx.mm256_or_ps(a, b), Avx.mm256_xor_ps(b, c));
					case 0x68: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, Avx.mm256_xor_ps(b, c)), Avx.mm256_andnot_ps(a, Avx.mm256_and_ps(b, c)));
					case 0x69: return mm256_xnor_si256(a, Avx.mm256_xor_ps(b, c));
					case 0x6A: return Avx.mm256_xor_ps(c, Avx.mm256_and_ps(b, a));
					case 0x6B: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, c), mm256_xnor_si256(a, Avx.mm256_xor_ps(b, c)));
					case 0x6C: return Avx.mm256_xor_ps(b, Avx.mm256_and_ps(a, c));
					case 0x6D: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, b), mm256_xnor_si256(a, Avx.mm256_xor_ps(b, c)));
					case 0x6E: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, b), Avx.mm256_xor_ps(b, c));
					case 0x6F: return mm256_ornot_si256(a, Avx.mm256_xor_ps(b, c));
					case 0x70: return Avx.mm256_andnot_ps(Avx.mm256_and_ps(b, c), a);
					case 0x71: return mm256_ornot_si256(Avx.mm256_or_ps(b, c), Avx.mm256_and_ps(a, Avx.mm256_xor_ps(b, c)));
					case 0x72: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, c), Avx.mm256_andnot_ps(c, a));
					case 0x73: return mm256_ornot_si256(b, Avx.mm256_andnot_ps(c, a));
					case 0x74: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, b), Avx.mm256_andnot_ps(b, a));
					case 0x75: return mm256_ornot_si256(c, Avx.mm256_andnot_ps(b, a));
					case 0x76: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), Avx.mm256_xor_ps(b, c));
					case 0x77: return mm256_nand_si256(c, b);
					case 0x78: return Avx.mm256_xor_ps(a, Avx.mm256_and_ps(b, c));
					case 0x79: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), mm256_xnor_si256(b, Avx.mm256_xor_ps(a, c)));
					case 0x7A: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), Avx.mm256_xor_ps(a, c));
					case 0x7B: return mm256_ornot_si256(b, Avx.mm256_xor_ps(a, c));
					case 0x7C: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, a), Avx.mm256_xor_ps(a, b));
					case 0x7D: return mm256_ornot_si256(c, Avx.mm256_xor_ps(a, b));
					case 0x7E: return Avx.mm256_or_ps(Avx.mm256_xor_ps(a, b), Avx.mm256_xor_ps(a, c));
					case 0x7F: return mm256_nand_si256(Avx.mm256_and_ps(a, b), c);
					case 0x80: return Avx.mm256_and_ps(a, Avx.mm256_and_ps(b, c));
					case 0x81: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, c), mm256_xnor_si256(a, b));
					case 0x82: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, a), c);
					case 0x83: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, b), mm256_ornot_si256(a, c));
					case 0x84: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, c), b);
					case 0x85: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, c), mm256_ornot_si256(c, b));
					case 0x86: return Avx.mm256_and_ps(Avx.mm256_or_ps(b, c), Avx.mm256_xor_ps(c, Avx.mm256_xor_ps(a, b)));
					case 0x87: return mm256_xnor_si256(a, Avx.mm256_and_ps(b, c));
					case 0x88: return Avx.mm256_and_ps(c, b);
					case 0x89: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, c), mm256_ornot_si256(a, b));
					case 0x8A: return Avx.mm256_andnot_ps(Avx.mm256_andnot_ps(b, a), c);
					case 0x8B: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), Avx.mm256_andnot_ps(b, mm256_not_si256(a)));
					case 0x8C: return Avx.mm256_andnot_ps(Avx.mm256_andnot_ps(c, a), b);
					case 0x8D: return Avx.mm256_or_ps(Avx.mm256_and_ps(c, b), Avx.mm256_andnot_ps(c, mm256_not_si256(a)));
					case 0x8E: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), Avx.mm256_andnot_ps(a, Avx.mm256_xor_ps(b, c)));
					case 0x8F: return mm256_ornot_si256(a, Avx.mm256_and_ps(b, c));
					case 0x90: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, c), a);
					case 0x91: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, c), mm256_ornot_si256(b, a));
					case 0x92: return Avx.mm256_and_ps(Avx.mm256_or_ps(a, c), Avx.mm256_xor_ps(c, Avx.mm256_xor_ps(a, b)));
					case 0x93: return mm256_xnor_si256(b, Avx.mm256_and_ps(a, c));
					case 0x94: return Avx.mm256_and_ps(Avx.mm256_or_ps(a, b), Avx.mm256_xor_ps(b, Avx.mm256_xor_ps(a, c)));
					case 0x95: return mm256_xnor_si256(c, Avx.mm256_and_ps(b, a));
					case 0x96: return Avx.mm256_xor_ps(a, Avx.mm256_xor_ps(b, c));
					case 0x97: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, c), a), Avx.mm256_andnot_ps(a, mm256_nand_si256(b, c)));
					case 0x98: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, c), Avx.mm256_or_ps(a, b));
					case 0x99: return mm256_xnor_si256(c, b);
					case 0x9A: return Avx.mm256_xor_ps(Avx.mm256_andnot_ps(b, a), c);
					case 0x9B: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, c), mm256_xnor_si256(b, c));
					case 0x9C: return Avx.mm256_xor_ps(Avx.mm256_andnot_ps(c, a), b);
					case 0x9D: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, b), mm256_xnor_si256(b, c));
					case 0x9E: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), Avx.mm256_xor_ps(c, Avx.mm256_xor_ps(a, b)));
					case 0x9F: return mm256_nand_si256(a, Avx.mm256_xor_ps(b, c));
					case 0xA0: return Avx.mm256_and_ps(c, a);
					case 0xA1: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, c), mm256_ornot_si256(b, a));
					case 0xA2: return Avx.mm256_andnot_ps(Avx.mm256_andnot_ps(a, b), c);
					case 0xA3: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, c), Avx.mm256_andnot_ps(a, mm256_not_si256(b)));
					case 0xA4: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, c), Avx.mm256_or_ps(a, b));
					case 0xA5: return mm256_xnor_si256(c, a);
					case 0xA6: return Avx.mm256_xor_ps(Avx.mm256_andnot_ps(a, b), c);
					case 0xA7: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, c), mm256_xnor_si256(a, c));
					case 0xA8: return Avx.mm256_and_ps(c, Avx.mm256_or_ps(a, b));
					case 0xA9: return mm256_xnor_si256(c, Avx.mm256_or_ps(b, a));
					case 0xAA: return c;
					case 0xAB: return mm256_ornot_si256(Avx.mm256_or_ps(b, a), c);
					case 0xAC: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, c), Avx.mm256_andnot_ps(a, b));
					case 0xAD: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), mm256_xnor_si256(a, c));
					case 0xAE: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, b), c);
					case 0xAF: return mm256_ornot_si256(a, c);
					case 0xB0: return Avx.mm256_andnot_ps(Avx.mm256_andnot_ps(c, b), a);
					case 0xB1: return Avx.mm256_or_ps(Avx.mm256_and_ps(c, a), Avx.mm256_andnot_ps(c, mm256_not_si256(b)));
					case 0xB2: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, Avx.mm256_and_ps(a, c)), Avx.mm256_andnot_ps(b, Avx.mm256_or_ps(a, c)));
					case 0xB3: return mm256_ornot_si256(b, Avx.mm256_and_ps(a, c));
					case 0xB4: return Avx.mm256_xor_ps(Avx.mm256_andnot_ps(c, b), a);
					case 0xB5: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), mm256_xnor_si256(a, c));
					case 0xB6: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, c), Avx.mm256_xor_ps(c, Avx.mm256_xor_ps(a, b)));
					case 0xB7: return mm256_nand_si256(b, Avx.mm256_xor_ps(a, c));
					case 0xB8: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), Avx.mm256_andnot_ps(b, a));
					case 0xB9: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, c), mm256_xnor_si256(b, c));
					case 0xBA: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, a), c);
					case 0xBB: return mm256_ornot_si256(b, c);
					case 0xBC: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, c), Avx.mm256_xor_ps(a, b));
					case 0xBD: return Avx.mm256_or_ps(Avx.mm256_xor_ps(a, b), mm256_xnor_si256(a, c));
					case 0xBE: return Avx.mm256_or_ps(c, Avx.mm256_xor_ps(b, a));
					case 0xBF: return mm256_ornot_si256(Avx.mm256_and_ps(b, a), c);
					case 0xC0: return Avx.mm256_and_ps(b, a);
					case 0xC1: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, b), mm256_ornot_si256(c, a));
					case 0xC2: return Avx.mm256_andnot_ps(Avx.mm256_xor_ps(a, b), Avx.mm256_or_ps(a, c));
					case 0xC3: return mm256_xnor_si256(b, a);
					case 0xC4: return Avx.mm256_andnot_ps(Avx.mm256_andnot_ps(a, c), b);
					case 0xC5: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), Avx.mm256_andnot_ps(a, mm256_not_si256(c)));
					case 0xC6: return Avx.mm256_xor_ps(Avx.mm256_andnot_ps(a, c), b);
					case 0xC7: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, b), mm256_xnor_si256(a, b));
					case 0xC8: return Avx.mm256_and_ps(b, Avx.mm256_or_ps(a, c));
					case 0xC9: return mm256_xnor_si256(b, Avx.mm256_or_ps(a, c));
					case 0xCA: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), Avx.mm256_andnot_ps(a, c));
					case 0xCB: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), mm256_xnor_si256(a, b));
					case 0xCC: return b;
					case 0xCD: return mm256_ornot_si256(Avx.mm256_or_ps(a, c), b);
					case 0xCE: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(a, c), b);
					case 0xCF: return mm256_ornot_si256(a, b);
					case 0xD0: return Avx.mm256_andnot_ps(Avx.mm256_andnot_ps(b, c), a);
					case 0xD1: return mm256_ornot_si256(Avx.mm256_or_ps(b, c), Avx.mm256_and_ps(a, b));
					case 0xD2: return Avx.mm256_xor_ps(Avx.mm256_andnot_ps(b, c), a);
					case 0xD3: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, a), mm256_xnor_si256(a, b));
					case 0xD4: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, b), Avx.mm256_andnot_ps(Avx.mm256_xor_ps(b, c), a));
					case 0xD5: return mm256_ornot_si256(c, Avx.mm256_and_ps(a, b));
					case 0xD6: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), Avx.mm256_xor_ps(b, Avx.mm256_xor_ps(a, c)));
					case 0xD7: return mm256_nand_si256(c, Avx.mm256_xor_ps(b, a));
					case 0xD8: return Avx.mm256_or_ps(Avx.mm256_and_ps(c, b), Avx.mm256_andnot_ps(c, a));
					case 0xD9: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), mm256_xnor_si256(b, c));
					case 0xDA: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), Avx.mm256_xor_ps(a, c));
					case 0xDB: return Avx.mm256_or_ps(Avx.mm256_xor_ps(a, c), mm256_xnor_si256(a, b));
					case 0xDC: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, a), b);
					case 0xDD: return mm256_ornot_si256(c, b);
					case 0xDE: return Avx.mm256_or_ps(b, Avx.mm256_xor_ps(a, c));
					case 0xDF: return mm256_ornot_si256(Avx.mm256_and_ps(a, c), b);
					case 0xE0: return Avx.mm256_and_ps(a, Avx.mm256_or_ps(b, c));
					case 0xE1: return mm256_xnor_si256(a, Avx.mm256_or_ps(b, c));
					case 0xE2: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, a), Avx.mm256_andnot_ps(b, c));
					case 0xE3: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, c), mm256_xnor_si256(a, b));
					case 0xE4: return Avx.mm256_or_ps(Avx.mm256_and_ps(c, a), Avx.mm256_andnot_ps(c, b));
					case 0xE5: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), mm256_xnor_si256(a, c));
					case 0xE6: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), Avx.mm256_xor_ps(b, c));
					case 0xE7: return Avx.mm256_or_ps(Avx.mm256_xor_ps(b, c), mm256_xnor_si256(a, b));
					case 0xE8: return Avx.mm256_or_ps(Avx.mm256_and_ps(b, c), Avx.mm256_and_ps(a, Avx.mm256_xor_ps(b, c)));
					case 0xE9: return Avx.mm256_or_ps(Avx.mm256_and_ps(a, b), Avx.mm256_xor_ps(b, mm256_xnor_si256(a, c)));
					case 0xEA: return Avx.mm256_or_ps(c, Avx.mm256_and_ps(b, a));
					case 0xEB: return mm256_ornot_si256(Avx.mm256_xor_ps(b, a), c);
					case 0xEC: return Avx.mm256_or_ps(b, Avx.mm256_and_ps(a, c));
					case 0xED: return mm256_ornot_si256(Avx.mm256_xor_ps(a, c), b);
					case 0xEE: return Avx.mm256_or_ps(c, b);
					case 0xEF: return Avx.mm256_or_ps(b, mm256_ornot_si256(a, c));
					case 0xF0: return a;
					case 0xF1: return mm256_ornot_si256(Avx.mm256_or_ps(b, c), a);
					case 0xF2: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(b, c), a);
					case 0xF3: return mm256_ornot_si256(b, a);
					case 0xF4: return Avx.mm256_or_ps(Avx.mm256_andnot_ps(c, b), a);
					case 0xF5: return mm256_ornot_si256(c, a);
					case 0xF6: return Avx.mm256_or_ps(a, Avx.mm256_xor_ps(b, c));
					case 0xF7: return mm256_ornot_si256(Avx.mm256_and_ps(b, c), a);
					case 0xF8: return Avx.mm256_or_ps(a, Avx.mm256_and_ps(b, c));
					case 0xF9: return mm256_ornot_si256(Avx.mm256_xor_ps(b, c), a);
					case 0xFA: return Avx.mm256_or_ps(c, a);
					case 0xFB: return Avx.mm256_or_ps(a, mm256_ornot_si256(b, c));
					case 0xFC: return Avx.mm256_or_ps(b, a);
					case 0xFD: return Avx.mm256_or_ps(a, mm256_ornot_si256(c, b));
					case 0xFE: return Avx.mm256_or_ps(a, Avx.mm256_or_ps(b, c));
					case 0xFF: return mm256_setall_ps();
				}
			}
			else throw new IllegalInstructionException();
        }
    }
}
